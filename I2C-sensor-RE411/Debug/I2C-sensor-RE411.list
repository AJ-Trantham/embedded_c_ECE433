
I2C-sensor-RE411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c54  08001c54  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001c54  08001c54  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c54  08001c54  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c58  08001c58  00011c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08001cc4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001cc4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b81  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086a  00000000  00000000  00022c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000280  00000000  00000000  00023488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000228  00000000  00000000  00023708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f86  00000000  00000000  00023930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000026be  00000000  00000000  000388b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084ac6  00000000  00000000  0003af74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfa3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c94  00000000  00000000  000bfab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001be8 	.word	0x08001be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001be8 	.word	0x08001be8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <main>:




int main(void)
{
 8000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac0:	b0d0      	sub	sp, #320	; 0x140
 8000ac2:	af08      	add	r7, sp, #32
    char txt[256];
    USART2_init();
 8000ac4:	f000 fb26 	bl	8001114 <USART2_init>

    I2C1_init();
 8000ac8:	f000 f87a 	bl	8000bc0 <I2C1_init>
    MPU9250init();
 8000acc:	f000 f99a 	bl	8000e04 <MPU9250init>

    // I2C MPU9250 TEST
    uint8_t test_value= I2C1_byteRead(MPU9250_ID, WHO_AM_I_MPU9250);
 8000ad0:	2175      	movs	r1, #117	; 0x75
 8000ad2:	20d0      	movs	r0, #208	; 0xd0
 8000ad4:	f000 f91a 	bl	8000d0c <I2C1_byteRead>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // test_value must be 0x71 if you can talk to the MPU-6500 device
    // Try to run in debug and check its value

    // I2C AK8963 TEST
    AK8963init();
 8000ade:	f000 f9c3 	bl	8000e68 <AK8963init>
    test_value= I2C1_byteRead(AK8963_ID, WHO_AM_I_AK8963);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2018      	movs	r0, #24
 8000ae6:	f000 f911 	bl	8000d0c <I2C1_byteRead>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Try to run in debug and check its value

    // Now the device is configured
    while(1)
    {
       int16_t T=readTemp();    // Read the sensor temperature
 8000af0:	f000 f9ce 	bl	8000e90 <readTemp>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
       int16_t Gx=readGyroX();  // Read the sensor Gyrosope for X axis
 8000afa:	f000 fa0f 	bl	8000f1c <readGyroX>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
       int16_t Gy=readGyroY();  // Read the sensor Gyrosope for Y axis
 8000b04:	f000 fa23 	bl	8000f4e <readGyroY>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
       int16_t Gz=readGyroZ();  // Read the sensor Gyrosope for Z axis
 8000b0e:	f000 fa37 	bl	8000f80 <readGyroZ>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
       int16_t Ax=readAccelX(); // Read the sensor Accelerometer for X axis -- This reg will need to control LED X_left, X_right
 8000b18:	f000 fa4b 	bl	8000fb2 <readAccelX>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
       int16_t Ay=readAccelY(); // Read the sensor Accelerometer for Y axis -- This reg will need to control LED Y_up, y_down
 8000b22:	f000 fa5f 	bl	8000fe4 <readAccelY>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
       int16_t Az=readAccelZ(); // Read the sensor Accelerometer for Z axis
 8000b2c:	f000 fa73 	bl	8001016 <readAccelZ>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
       int16_t Mx=readMagX();   // Read the sensor Magnetometer for X axis
 8000b36:	f000 fa87 	bl	8001048 <readMagX>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
       int16_t My=readMagY();   // Read the sensor Magnetometer for Y axis
 8000b40:	f000 fa9b 	bl	800107a <readMagY>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
       int16_t Mz=readMagZ();   // Read the sensor Magnetometer for Z axis
 8000b4a:	f000 faaf 	bl	80010ac <readMagZ>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

       ///////////////////////
       ///  *** Start Debugging Section -- Should be removed from final code *** ///
       sprintf(txt, "$%d %d %d %d %d %d %d %d %d %d;", T, Gx, Gy, Gz, Ax, Ay, Az, Mx, My, Mz); // printing all sensors in one shot!
 8000b54:	f9b7 e11c 	ldrsh.w	lr, [r7, #284]	; 0x11c
 8000b58:	f9b7 811a 	ldrsh.w	r8, [r7, #282]	; 0x11a
 8000b5c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	f9b7 2116 	ldrsh.w	r2, [r7, #278]	; 0x116
 8000b66:	f9b7 1114 	ldrsh.w	r1, [r7, #276]	; 0x114
 8000b6a:	f9b7 0112 	ldrsh.w	r0, [r7, #274]	; 0x112
 8000b6e:	f9b7 4110 	ldrsh.w	r4, [r7, #272]	; 0x110
 8000b72:	f9b7 510e 	ldrsh.w	r5, [r7, #270]	; 0x10e
 8000b76:	f9b7 610c 	ldrsh.w	r6, [r7, #268]	; 0x10c
 8000b7a:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
 8000b7e:	f107 0c08 	add.w	ip, r7, #8
 8000b82:	9307      	str	r3, [sp, #28]
 8000b84:	9606      	str	r6, [sp, #24]
 8000b86:	9505      	str	r5, [sp, #20]
 8000b88:	9404      	str	r4, [sp, #16]
 8000b8a:	9003      	str	r0, [sp, #12]
 8000b8c:	9102      	str	r1, [sp, #8]
 8000b8e:	9201      	str	r2, [sp, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	4643      	mov	r3, r8
 8000b96:	4672      	mov	r2, lr
 8000b98:	4908      	ldr	r1, [pc, #32]	; (8000bbc <main+0x100>)
 8000b9a:	4660      	mov	r0, ip
 8000b9c:	f000 fc1e 	bl	80013dc <siprintf>
       // sample data output: 24 29 407 -148 5 -449 2066 0 0 0
       // One issue with dumping all data in one graph is that some of the have a high range while others don't. Consider scaling them down
       myprint(txt);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fa9a 	bl	80010de <myprint>
       //////////////////////



    //Re-strobe the mag data
    I2C1_byteWrite(AK8963_ID, AK8963_CNTL, 0x11); // Continuous mode, 16 bit output
 8000baa:	2211      	movs	r2, #17
 8000bac:	210a      	movs	r1, #10
 8000bae:	2018      	movs	r0, #24
 8000bb0:	f000 f856 	bl	8000c60 <I2C1_byteWrite>
    delayMs(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f000 fb09 	bl	80011cc <delayMs>
    {
 8000bba:	e799      	b.n	8000af0 <main+0x34>
 8000bbc:	08001c00 	.word	0x08001c00

08000bc0 <I2C1_init>:
//    pull up from the MCU since MPU-9250 has a built in pull-ups
// 3- Reset I2C1 module
// 4- Program its clock  (two fields in two different regs, checkout the book for example).
//    The target speed is 100KHz.
// 4- Enable peripheral
void I2C1_init(void) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 2; 			// enable GPIOB clock
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <I2C1_init+0x94>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <I2C1_init+0x94>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (1<<21);	// Enable I2C1 clock
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <I2C1_init+0x94>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <I2C1_init+0x94>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40

	// enable AF pins: PB8=I2C1_SCL, PB9=I2C_SDA
	GPIOB->AFR[1] &= ~0x000000FF;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <I2C1_init+0x98>)
 8000bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <I2C1_init+0x98>)
 8000be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000be6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x44;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <I2C1_init+0x98>)
 8000bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <I2C1_init+0x98>)
 8000bee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000bf2:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->MODER &= ~0x000F0000;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <I2C1_init+0x98>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <I2C1_init+0x98>)
 8000bfa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000bfe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;			// set PB8 and 9 to AF 10
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <I2C1_init+0x98>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <I2C1_init+0x98>)
 8000c06:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000c0a:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= 0x00000300;		// output with open drain
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <I2C1_init+0x98>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <I2C1_init+0x98>)
 8000c12:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c16:	6053      	str	r3, [r2, #4]

	// pull up resistors default on stm32F411

	I2C1->CR1 = 0x8000;			// software reset the I2C
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <I2C1_init+0x9c>)
 8000c1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c1e:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <I2C1_init+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <I2C1_init+0x9c>)
 8000c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c2a:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0010;			// peripheral clock is 16 MHz
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <I2C1_init+0x9c>)
 8000c2e:	2210      	movs	r2, #16
 8000c30:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 80;				// standard mode, 100Khz
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <I2C1_init+0x9c>)
 8000c34:	2250      	movs	r2, #80	; 0x50
 8000c36:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 17;			// maximum rise time
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <I2C1_init+0x9c>)
 8000c3a:	2211      	movs	r2, #17
 8000c3c:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;		// enable I2C module
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <I2C1_init+0x9c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <I2C1_init+0x9c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40005400 	.word	0x40005400

08000c60 <I2C1_byteWrite>:
//  7- check that the data reg is empty
//  8- send reg_addr
//  9- check that the data reg is empty
//  10- send reg_data
//  11- issue the STOP condition
void I2C1_byteWrite(uint8_t slave_addr, uint8_t reg_addr, uint8_t reg_data) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	717b      	strb	r3, [r7, #5]

	int used_to_clear;

	while (I2C1->SR2 & 2);			/*wait for I2C to be available*/
 8000c72:	bf00      	nop
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f9      	bne.n	8000c74 <I2C1_byteWrite+0x14>

	I2C1->CR1 |= 0x100;				// generate start
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 1));		// wait until start flag gets set
 8000c8c:	bf00      	nop
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f9      	beq.n	8000c8e <I2C1_byteWrite+0x2e>

	I2C1->DR = slave_addr | I2C_WRITE;			// transmit the slave address or since we address is already shifted to the left 1
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & 2));					// wait until address flag is set
 8000ca0:	bf00      	nop
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f9      	beq.n	8000ca2 <I2C1_byteWrite+0x42>
	used_to_clear = I2C1->SR2;					// Clear SR1
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	60fb      	str	r3, [r7, #12]
	used_to_clear = I2C1->SR1;					// Clear SR2
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	60fb      	str	r3, [r7, #12]

	while (!(I2C1->SR1 &0x80));					// check that data reg is empty TxE is off
 8000cba:	bf00      	nop
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f9      	beq.n	8000cbc <I2C1_byteWrite+0x5c>
	I2C1->DR = reg_addr;						// send address
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	6113      	str	r3, [r2, #16]

	while (!(I2C1->SR1 & 0x80));				// check that data reg is empty TxE is off
 8000cce:	bf00      	nop
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f9      	beq.n	8000cd0 <I2C1_byteWrite+0x70>
	I2C1->DR = reg_data;						// send data
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	6113      	str	r3, [r2, #16]

	while (!(I2C1->SR1 & 0x80));				// wait until we are done writing to kill convo - this is important and omitting it caused issues
 8000ce2:	bf00      	nop
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f9      	beq.n	8000ce4 <I2C1_byteWrite+0x84>
	I2C1->CR1 |= 0x200;							// generate stop
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <I2C1_byteWrite+0xa8>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]

}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40005400 	.word	0x40005400

08000d0c <I2C1_byteRead>:
//  15- clear SR1 and SR2  (by reading them)
//  16- check that the receive data reg is not empty
//  17- read the received data and store it into reg_data
//  18- issue the STOP condition
//  19- return reg_data
uint8_t I2C1_byteRead(uint8_t slave_addr, uint8_t reg_addr) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
    uint8_t reg_data;
    int used_to_clear;

    while (I2C1->SR2 & 2);			/*wait for I2C to be available*/
 8000d1c:	bf00      	nop
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f9      	bne.n	8000d1e <I2C1_byteRead+0x12>

    I2C1->CR1 |= 0x100;				// generate start
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a34      	ldr	r2, [pc, #208]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & 1));		// wait until start flag gets set
 8000d36:	bf00      	nop
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f9      	beq.n	8000d38 <I2C1_byteRead+0x2c>

    I2C1->DR = slave_addr | I2C_WRITE;			// transmit the slave address and action bit
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & 2));					// wait until address flag is set
 8000d4a:	bf00      	nop
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f9      	beq.n	8000d4c <I2C1_byteRead+0x40>
    used_to_clear = I2C1->SR2;					// Clear SR1
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	60fb      	str	r3, [r7, #12]
    used_to_clear = I2C1->SR1;					// Clear SR2
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	60fb      	str	r3, [r7, #12]

    while (!(I2C1->SR1 &0x80));					// check that data reg is empty TxE is off
 8000d64:	bf00      	nop
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f9      	beq.n	8000d66 <I2C1_byteRead+0x5a>
    I2C1->DR = reg_addr;						// send address
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 &0x80));					// check that data reg is empty TxE is off
 8000d78:	bf00      	nop
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f9      	beq.n	8000d7a <I2C1_byteRead+0x6e>

    I2C1->CR1 |= 0x100;							// generate restart 10
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d90:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & 1));					// wait until start flag gets set
 8000d92:	bf00      	nop
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f9      	beq.n	8000d94 <I2C1_byteRead+0x88>

    I2C1->DR = slave_addr | I2C_READ;			// transmit the slave address and read bit
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000daa:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & 2));					// wait until address flag is set
 8000dac:	bf00      	nop
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f9      	beq.n	8000dae <I2C1_byteRead+0xa2>
    I2C1->CR1 &= ~(1<<10);						// clear the ack bit
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dc4:	6013      	str	r3, [r2, #0]
    used_to_clear = I2C1->SR2;					// Clear SR1
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	60fb      	str	r3, [r7, #12]
    used_to_clear = I2C1->SR1;					// Clear SR2
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	60fb      	str	r3, [r7, #12]

    while (!(I2C1->SR1 & 0x40));				// wait until rxne is set, we are ready to read
 8000dd2:	bf00      	nop
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f9      	beq.n	8000dd4 <I2C1_byteRead+0xc8>
    reg_data = I2C1->DR;						// read data from data register
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	72fb      	strb	r3, [r7, #11]

    I2C1->CR1 |= 0x200;							// generate stop
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <I2C1_byteRead+0xf4>)
 8000dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df0:	6013      	str	r3, [r2, #0]


    return reg_data;
 8000df2:	7afb      	ldrb	r3, [r7, #11]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40005400 	.word	0x40005400

08000e04 <MPU9250init>:



void MPU9250init(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
   #define CLKSEL  1
   // MPU-9250 Chip

   // Register[PWR_MGMT_1] : H_RESET   SLEEP   CYCLE   GYRO_STANDBY   PD_PTAT   CLKSEL[2:0]
   //                           1        0       0         0             0          1
   I2C1_byteWrite(MPU9250_ID, PWR_MGMT_1, _BV(H_RESET)|CLKSEL); // Clear SLEEP mode bit, enable all sensors
 8000e08:	2281      	movs	r2, #129	; 0x81
 8000e0a:	216b      	movs	r1, #107	; 0x6b
 8000e0c:	20d0      	movs	r0, #208	; 0xd0
 8000e0e:	f7ff ff27 	bl	8000c60 <I2C1_byteWrite>

   delayMs(10);                             // Sometime to allow reseting the chip
 8000e12:	200a      	movs	r0, #10
 8000e14:	f000 f9da 	bl	80011cc <delayMs>

   I2C1_byteWrite(MPU9250_ID, PWR_MGMT_1, CLKSEL);             //  Auto select clock or use internal
 8000e18:	2201      	movs	r2, #1
 8000e1a:	216b      	movs	r1, #107	; 0x6b
 8000e1c:	20d0      	movs	r0, #208	; 0xd0
 8000e1e:	f7ff ff1f 	bl	8000c60 <I2C1_byteWrite>
   delayMs(100);                           // Sometime to allow stabilizing the chip
 8000e22:	2064      	movs	r0, #100	; 0x64
 8000e24:	f000 f9d2 	bl	80011cc <delayMs>

   // Register[CONFIG] : FIFO_MODE   EXT_SYNC_SET[2:0]   DLPF_CFG[2:0]
   //                        0              0                3
   I2C1_byteWrite(MPU9250_ID, CONFIG,     0x03); // Low-pass filter enable
 8000e28:	2203      	movs	r2, #3
 8000e2a:	211a      	movs	r1, #26
 8000e2c:	20d0      	movs	r0, #208	; 0xd0
 8000e2e:	f7ff ff17 	bl	8000c60 <I2C1_byteWrite>

   // Register[SMPLRT_DIV] : SMPLRT_DIV[7:0]
   //                             4
   // SAMPLE_RATE= Internal_Sample_Rate / (1 + SMPLRT_DIV) = 1K/(1+4)= 200Hz
   I2C1_byteWrite(MPU9250_ID, SMPLRT_DIV, 0x04); // Use a 200 Hz rate; a rate consistent with the filter update rate
 8000e32:	2204      	movs	r2, #4
 8000e34:	2119      	movs	r1, #25
 8000e36:	20d0      	movs	r0, #208	; 0xd0
 8000e38:	f7ff ff12 	bl	8000c60 <I2C1_byteWrite>
   //                                                                  01  (+500dps)
   //                                                                  10  (+1000dps)
   //                                                                  11  (+2000dps)
   //
   //I2C1_byteWrite(MPU9250_ID, GYRO_CONFIG, (3<<3) );   // Set full scale range for the gyro +2000dps
   I2C1_byteWrite(MPU9250_ID, GYRO_CONFIG, 0 );   // Set full scale range for the gyro +250dps
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	211b      	movs	r1, #27
 8000e40:	20d0      	movs	r0, #208	; 0xd0
 8000e42:	f7ff ff0d 	bl	8000c60 <I2C1_byteWrite>
   // Register[ACCEL_CONFIG]: ax_st_en   ay_st_en   az_st_en   ACCEL_FS_SEL[1:0]   -[2:0]
   //                             0          0         0             00  (+-2g)
   //                                                                01  (+-4g)
   //                                                                10  (+-8g)
   //                                                                11  (+-16g)
   I2C1_byteWrite(MPU9250_ID, ACCEL_CONFIG, (3<<3));  // Set full scale range for the accelerometer +-16g
 8000e46:	2218      	movs	r2, #24
 8000e48:	211c      	movs	r1, #28
 8000e4a:	20d0      	movs	r0, #208	; 0xd0
 8000e4c:	f7ff ff08 	bl	8000c60 <I2C1_byteWrite>


   // Register[ACCEL_CONFIG2]: -     ACCEL_FCHOICE_B[3:2]       A_DLPF_CFG[1:0]
   //                                           0                       3
   I2C1_byteWrite(MPU9250_ID, ACCEL_CONFIG2, (3<<3));  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8000e50:	2218      	movs	r2, #24
 8000e52:	211d      	movs	r1, #29
 8000e54:	20d0      	movs	r0, #208	; 0xd0
 8000e56:	f7ff ff03 	bl	8000c60 <I2C1_byteWrite>


   // Register[INT_PIN_CFG]: ACTL      OPEN      LATCH_INT_EN      INT_ANYRD_2CLEAR    ACTL_FSYNC    FSYNC_INT_MODE_EN     BYPASS_EN   -
   //                         0         0             0                  1                 0                0                1        N/A
   I2C1_byteWrite(MPU9250_ID, INT_PIN_CFG, 0x12);             // Allows the MCU to access the magnetometer on the I2C b us
 8000e5a:	2212      	movs	r2, #18
 8000e5c:	2137      	movs	r1, #55	; 0x37
 8000e5e:	20d0      	movs	r0, #208	; 0xd0
 8000e60:	f7ff fefe 	bl	8000c60 <I2C1_byteWrite>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <AK8963init>:

void AK8963init(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
I2C1_byteWrite(AK8963_ID, AK8963_CNTL, 0x00); // Power down magnetometer
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	210a      	movs	r1, #10
 8000e70:	2018      	movs	r0, #24
 8000e72:	f7ff fef5 	bl	8000c60 <I2C1_byteWrite>
I2C1_byteWrite(AK8963_ID, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8000e76:	220f      	movs	r2, #15
 8000e78:	210a      	movs	r1, #10
 8000e7a:	2018      	movs	r0, #24
 8000e7c:	f7ff fef0 	bl	8000c60 <I2C1_byteWrite>
I2C1_byteWrite(AK8963_ID, AK8963_CNTL, 0x12); // Continuous mode, 16 bit output
 8000e80:	2212      	movs	r2, #18
 8000e82:	210a      	movs	r1, #10
 8000e84:	2018      	movs	r0, #24
 8000e86:	f7ff feeb 	bl	8000c60 <I2C1_byteWrite>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <readTemp>:

int16_t readTemp(){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
int16_t tempInt;
tempInt =I2C1_byteRead(MPU9250_ID, TEMP_OUT_H)<<8;
 8000e96:	2141      	movs	r1, #65	; 0x41
 8000e98:	20d0      	movs	r0, #208	; 0xd0
 8000e9a:	f7ff ff37 	bl	8000d0c <I2C1_byteRead>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	80fb      	strh	r3, [r7, #6]
tempInt|=I2C1_byteRead(MPU9250_ID, TEMP_OUT_L);
 8000ea4:	2142      	movs	r1, #66	; 0x42
 8000ea6:	20d0      	movs	r0, #208	; 0xd0
 8000ea8:	f7ff ff30 	bl	8000d0c <I2C1_byteRead>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	80fb      	strh	r3, [r7, #6]
float  tempFloat=((float) tempInt) / 333.87 + 21.0;
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec2:	ee17 0a90 	vmov	r0, s15
 8000ec6:	f7ff fb3f 	bl	8000548 <__aeabi_f2d>
 8000eca:	a312      	add	r3, pc, #72	; (adr r3, 8000f14 <readTemp+0x84>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fcbc 	bl	800084c <__aeabi_ddiv>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4621      	mov	r1, r4
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <readTemp+0x80>)
 8000ee2:	f7ff f9d3 	bl	800028c <__adddf3>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4618      	mov	r0, r3
 8000eec:	4621      	mov	r1, r4
 8000eee:	f7ff fd95 	bl	8000a1c <__aeabi_d2f>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	603b      	str	r3, [r7, #0]
return (int16_t) tempFloat;
 8000ef6:	edd7 7a00 	vldr	s15, [r7]
 8000efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efe:	ee17 3a90 	vmov	r3, s15
 8000f02:	b21b      	sxth	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	40350000 	.word	0x40350000
 8000f14:	851eb852 	.word	0x851eb852
 8000f18:	4074ddeb 	.word	0x4074ddeb

08000f1c <readGyroX>:

int16_t readGyroX(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, GYRO_XOUT_H)<<8;
 8000f22:	2143      	movs	r1, #67	; 0x43
 8000f24:	20d0      	movs	r0, #208	; 0xd0
 8000f26:	f7ff fef1 	bl	8000d0c <I2C1_byteRead>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, GYRO_XOUT_L);
 8000f30:	2144      	movs	r1, #68	; 0x44
 8000f32:	20d0      	movs	r0, #208	; 0xd0
 8000f34:	f7ff feea 	bl	8000d0c <I2C1_byteRead>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]
return res;
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <readGyroY>:

int16_t readGyroY(){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, GYRO_YOUT_H)<<8;
 8000f54:	2145      	movs	r1, #69	; 0x45
 8000f56:	20d0      	movs	r0, #208	; 0xd0
 8000f58:	f7ff fed8 	bl	8000d0c <I2C1_byteRead>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, GYRO_YOUT_L);
 8000f62:	2146      	movs	r1, #70	; 0x46
 8000f64:	20d0      	movs	r0, #208	; 0xd0
 8000f66:	f7ff fed1 	bl	8000d0c <I2C1_byteRead>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	80fb      	strh	r3, [r7, #6]
return res;
 8000f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <readGyroZ>:

int16_t readGyroZ(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, GYRO_ZOUT_H)<<8;
 8000f86:	2147      	movs	r1, #71	; 0x47
 8000f88:	20d0      	movs	r0, #208	; 0xd0
 8000f8a:	f7ff febf 	bl	8000d0c <I2C1_byteRead>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, GYRO_ZOUT_L);
 8000f94:	2148      	movs	r1, #72	; 0x48
 8000f96:	20d0      	movs	r0, #208	; 0xd0
 8000f98:	f7ff feb8 	bl	8000d0c <I2C1_byteRead>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
return res;
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <readAccelX>:

int16_t readAccelX(){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, ACCEL_XOUT_H)<<8;
 8000fb8:	213b      	movs	r1, #59	; 0x3b
 8000fba:	20d0      	movs	r0, #208	; 0xd0
 8000fbc:	f7ff fea6 	bl	8000d0c <I2C1_byteRead>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, ACCEL_XOUT_L);
 8000fc6:	213c      	movs	r1, #60	; 0x3c
 8000fc8:	20d0      	movs	r0, #208	; 0xd0
 8000fca:	f7ff fe9f 	bl	8000d0c <I2C1_byteRead>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	80fb      	strh	r3, [r7, #6]
return res;
 8000fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <readAccelY>:

int16_t readAccelY(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, ACCEL_YOUT_H)<<8;
 8000fea:	213d      	movs	r1, #61	; 0x3d
 8000fec:	20d0      	movs	r0, #208	; 0xd0
 8000fee:	f7ff fe8d 	bl	8000d0c <I2C1_byteRead>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, ACCEL_YOUT_L);
 8000ff8:	213e      	movs	r1, #62	; 0x3e
 8000ffa:	20d0      	movs	r0, #208	; 0xd0
 8000ffc:	f7ff fe86 	bl	8000d0c <I2C1_byteRead>
 8001000:	4603      	mov	r3, r0
 8001002:	b21a      	sxth	r2, r3
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4313      	orrs	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]
return res;
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <readAccelZ>:

int16_t readAccelZ(){
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(MPU9250_ID, ACCEL_ZOUT_H)<<8;
 800101c:	213f      	movs	r1, #63	; 0x3f
 800101e:	20d0      	movs	r0, #208	; 0xd0
 8001020:	f7ff fe74 	bl	8000d0c <I2C1_byteRead>
 8001024:	4603      	mov	r3, r0
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(MPU9250_ID, ACCEL_ZOUT_L);
 800102a:	2140      	movs	r1, #64	; 0x40
 800102c:	20d0      	movs	r0, #208	; 0xd0
 800102e:	f7ff fe6d 	bl	8000d0c <I2C1_byteRead>
 8001032:	4603      	mov	r3, r0
 8001034:	b21a      	sxth	r2, r3
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4313      	orrs	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
return res;
 800103c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <readMagX>:
int16_t readMagX(){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(AK8963_ID, AK8963_XOUT_H)<<8;
 800104e:	2104      	movs	r1, #4
 8001050:	2018      	movs	r0, #24
 8001052:	f7ff fe5b 	bl	8000d0c <I2C1_byteRead>
 8001056:	4603      	mov	r3, r0
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(AK8963_ID, AK8963_XOUT_L);
 800105c:	2103      	movs	r1, #3
 800105e:	2018      	movs	r0, #24
 8001060:	f7ff fe54 	bl	8000d0c <I2C1_byteRead>
 8001064:	4603      	mov	r3, r0
 8001066:	b21a      	sxth	r2, r3
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	4313      	orrs	r3, r2
 800106c:	80fb      	strh	r3, [r7, #6]
return res;
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <readMagY>:
int16_t readMagY(){
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(AK8963_ID, AK8963_YOUT_H)<<8;
 8001080:	2106      	movs	r1, #6
 8001082:	2018      	movs	r0, #24
 8001084:	f7ff fe42 	bl	8000d0c <I2C1_byteRead>
 8001088:	4603      	mov	r3, r0
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(AK8963_ID, AK8963_YOUT_L);
 800108e:	2105      	movs	r1, #5
 8001090:	2018      	movs	r0, #24
 8001092:	f7ff fe3b 	bl	8000d0c <I2C1_byteRead>
 8001096:	4603      	mov	r3, r0
 8001098:	b21a      	sxth	r2, r3
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4313      	orrs	r3, r2
 800109e:	80fb      	strh	r3, [r7, #6]
return res;
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <readMagZ>:
int16_t readMagZ(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
int16_t res;
res  = I2C1_byteRead(AK8963_ID, AK8963_ZOUT_H)<<8;
 80010b2:	2108      	movs	r1, #8
 80010b4:	2018      	movs	r0, #24
 80010b6:	f7ff fe29 	bl	8000d0c <I2C1_byteRead>
 80010ba:	4603      	mov	r3, r0
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	80fb      	strh	r3, [r7, #6]
res |= I2C1_byteRead(AK8963_ID, AK8963_ZOUT_L);
 80010c0:	2107      	movs	r1, #7
 80010c2:	2018      	movs	r0, #24
 80010c4:	f7ff fe22 	bl	8000d0c <I2C1_byteRead>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	80fb      	strh	r3, [r7, #6]
return (res);
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <myprint>:


void myprint (char msg[]){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
    uint8_t idx=0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
    while(msg[idx]!='\0' ){ USART2_write(msg[idx++]);}
 80010ea:	e009      	b.n	8001100 <myprint+0x22>
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	73fa      	strb	r2, [r7, #15]
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f84e 	bl	800119c <USART2_write>
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ef      	bne.n	80010ec <myprint+0xe>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <USART2_init>:

/* initialize USART2 to transmit at 9600 Baud */
void USART2_init (void) {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <USART2_init+0x7c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <USART2_init+0x7c>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <USART2_init+0x7c>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <USART2_init+0x7c>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2, PA3 for USART2 TX, RX */
    GPIOA->AFR[0] &= ~0xFF00;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <USART2_init+0x80>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <USART2_init+0x80>)
 8001136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800113a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x7700;   /* alt7 for USART2 */
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <USART2_init+0x80>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <USART2_init+0x80>)
 8001142:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001146:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  &= ~0x00F0;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <USART2_init+0x80>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <USART2_init+0x80>)
 800114e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001152:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x00A0;   /* enable alt. function for PA2, PA3 */
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <USART2_init+0x80>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <USART2_init+0x80>)
 800115a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800115e:	6013      	str	r3, [r2, #0]

    USART2->BRR = 0x008B;       /* 115200 baud @ 16 MHz */
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <USART2_init+0x84>)
 8001162:	228b      	movs	r2, #139	; 0x8b
 8001164:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x000C;       /* enable Tx, Rx, 8-bit data */
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <USART2_init+0x84>)
 8001168:	220c      	movs	r2, #12
 800116a:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <USART2_init+0x84>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <USART2_init+0x84>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    USART2->CR1 |= 0x2000;      /* enable USART2 */
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <USART2_init+0x84>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <USART2_init+0x84>)
 800117e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40004400 	.word	0x40004400

0800119c <USART2_write>:

/* Write a character to USART2 */
void USART2_write (int ch) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 80011a4:	bf00      	nop
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <USART2_write+0x2c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f9      	beq.n	80011a6 <USART2_write+0xa>
    USART2->DR = (ch & 0xFF);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <USART2_write+0x2c>)
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	6053      	str	r3, [r2, #4]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40004400 	.word	0x40004400

080011cc <delayMs>:
    while (!(USART2->SR & 0x0020)) {}   // wait until char arrives
    return USART2->DR;
}


void delayMs(int n) {
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    int i;

    /* Configure SysTick */
    SysTick->LOAD = 16000;  /* reload with number of clocks per millisecond */
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <delayMs+0x50>)
 80011d6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80011da:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;       /* clear current value register */
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <delayMs+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x5;    /* Enable the timer */
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <delayMs+0x50>)
 80011e4:	2205      	movs	r2, #5
 80011e6:	601a      	str	r2, [r3, #0]

    for(i = 0; i < n; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e009      	b.n	8001202 <delayMs+0x36>
        while((SysTick->CTRL & 0x10000) == 0) /* wait until the COUNTFLAG is set */
 80011ee:	bf00      	nop
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <delayMs+0x50>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f9      	beq.n	80011f0 <delayMs+0x24>
    for(i = 0; i < n; i++) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf1      	blt.n	80011ee <delayMs+0x22>
            { }
    }
    SysTick->CTRL = 0;      /* Stop the timer (Enable = 0) */
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <delayMs+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e010 	.word	0xe000e010

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f878 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f000 f870 	bl	8001388 <__errno>
 80012a8:	4602      	mov	r2, r0
 80012aa:	230c      	movs	r3, #12
 80012ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20020000 	.word	0x20020000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	20000084 	.word	0x20000084
 80012dc:	20000098 	.word	0x20000098

080012e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <SystemInit+0x28>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <SystemInit+0x28>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SystemInit+0x28>)
 80012f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fa:	609a      	str	r2, [r3, #8]
#endif
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
  ldr  r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001336:	f7ff ffd3 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f000 f82b 	bl	8001394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff fbbd 	bl	8000abc <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001348:	08001c5c 	.word	0x08001c5c
  ldr  r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001350:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001354:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001358:	20000098 	.word	0x20000098

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	20000090 	.word	0x20000090

08001388 <__errno>:
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <__errno+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000004 	.word	0x20000004

08001394 <__libc_init_array>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4e0d      	ldr	r6, [pc, #52]	; (80013cc <__libc_init_array+0x38>)
 8001398:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__libc_init_array+0x3c>)
 800139a:	1ba4      	subs	r4, r4, r6
 800139c:	10a4      	asrs	r4, r4, #2
 800139e:	2500      	movs	r5, #0
 80013a0:	42a5      	cmp	r5, r4
 80013a2:	d109      	bne.n	80013b8 <__libc_init_array+0x24>
 80013a4:	4e0b      	ldr	r6, [pc, #44]	; (80013d4 <__libc_init_array+0x40>)
 80013a6:	4c0c      	ldr	r4, [pc, #48]	; (80013d8 <__libc_init_array+0x44>)
 80013a8:	f000 fc1e 	bl	8001be8 <_init>
 80013ac:	1ba4      	subs	r4, r4, r6
 80013ae:	10a4      	asrs	r4, r4, #2
 80013b0:	2500      	movs	r5, #0
 80013b2:	42a5      	cmp	r5, r4
 80013b4:	d105      	bne.n	80013c2 <__libc_init_array+0x2e>
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013bc:	4798      	blx	r3
 80013be:	3501      	adds	r5, #1
 80013c0:	e7ee      	b.n	80013a0 <__libc_init_array+0xc>
 80013c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c6:	4798      	blx	r3
 80013c8:	3501      	adds	r5, #1
 80013ca:	e7f2      	b.n	80013b2 <__libc_init_array+0x1e>
 80013cc:	08001c54 	.word	0x08001c54
 80013d0:	08001c54 	.word	0x08001c54
 80013d4:	08001c54 	.word	0x08001c54
 80013d8:	08001c58 	.word	0x08001c58

080013dc <siprintf>:
 80013dc:	b40e      	push	{r1, r2, r3}
 80013de:	b500      	push	{lr}
 80013e0:	b09c      	sub	sp, #112	; 0x70
 80013e2:	ab1d      	add	r3, sp, #116	; 0x74
 80013e4:	9002      	str	r0, [sp, #8]
 80013e6:	9006      	str	r0, [sp, #24]
 80013e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <siprintf+0x38>)
 80013ee:	9107      	str	r1, [sp, #28]
 80013f0:	9104      	str	r1, [sp, #16]
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <siprintf+0x3c>)
 80013f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80013f8:	9105      	str	r1, [sp, #20]
 80013fa:	6800      	ldr	r0, [r0, #0]
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	a902      	add	r1, sp, #8
 8001400:	f000 f866 	bl	80014d0 <_svfiprintf_r>
 8001404:	9b02      	ldr	r3, [sp, #8]
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	b01c      	add	sp, #112	; 0x70
 800140c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001410:	b003      	add	sp, #12
 8001412:	4770      	bx	lr
 8001414:	20000004 	.word	0x20000004
 8001418:	ffff0208 	.word	0xffff0208

0800141c <__ssputs_r>:
 800141c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001420:	688e      	ldr	r6, [r1, #8]
 8001422:	429e      	cmp	r6, r3
 8001424:	4682      	mov	sl, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4690      	mov	r8, r2
 800142a:	4699      	mov	r9, r3
 800142c:	d837      	bhi.n	800149e <__ssputs_r+0x82>
 800142e:	898a      	ldrh	r2, [r1, #12]
 8001430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001434:	d031      	beq.n	800149a <__ssputs_r+0x7e>
 8001436:	6825      	ldr	r5, [r4, #0]
 8001438:	6909      	ldr	r1, [r1, #16]
 800143a:	1a6f      	subs	r7, r5, r1
 800143c:	6965      	ldr	r5, [r4, #20]
 800143e:	2302      	movs	r3, #2
 8001440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001444:	fb95 f5f3 	sdiv	r5, r5, r3
 8001448:	f109 0301 	add.w	r3, r9, #1
 800144c:	443b      	add	r3, r7
 800144e:	429d      	cmp	r5, r3
 8001450:	bf38      	it	cc
 8001452:	461d      	movcc	r5, r3
 8001454:	0553      	lsls	r3, r2, #21
 8001456:	d530      	bpl.n	80014ba <__ssputs_r+0x9e>
 8001458:	4629      	mov	r1, r5
 800145a:	f000 fb2b 	bl	8001ab4 <_malloc_r>
 800145e:	4606      	mov	r6, r0
 8001460:	b950      	cbnz	r0, 8001478 <__ssputs_r+0x5c>
 8001462:	230c      	movs	r3, #12
 8001464:	f8ca 3000 	str.w	r3, [sl]
 8001468:	89a3      	ldrh	r3, [r4, #12]
 800146a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146e:	81a3      	strh	r3, [r4, #12]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	463a      	mov	r2, r7
 800147a:	6921      	ldr	r1, [r4, #16]
 800147c:	f000 faa8 	bl	80019d0 <memcpy>
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148a:	81a3      	strh	r3, [r4, #12]
 800148c:	6126      	str	r6, [r4, #16]
 800148e:	6165      	str	r5, [r4, #20]
 8001490:	443e      	add	r6, r7
 8001492:	1bed      	subs	r5, r5, r7
 8001494:	6026      	str	r6, [r4, #0]
 8001496:	60a5      	str	r5, [r4, #8]
 8001498:	464e      	mov	r6, r9
 800149a:	454e      	cmp	r6, r9
 800149c:	d900      	bls.n	80014a0 <__ssputs_r+0x84>
 800149e:	464e      	mov	r6, r9
 80014a0:	4632      	mov	r2, r6
 80014a2:	4641      	mov	r1, r8
 80014a4:	6820      	ldr	r0, [r4, #0]
 80014a6:	f000 fa9e 	bl	80019e6 <memmove>
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	1b9b      	subs	r3, r3, r6
 80014ae:	60a3      	str	r3, [r4, #8]
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	441e      	add	r6, r3
 80014b4:	6026      	str	r6, [r4, #0]
 80014b6:	2000      	movs	r0, #0
 80014b8:	e7dc      	b.n	8001474 <__ssputs_r+0x58>
 80014ba:	462a      	mov	r2, r5
 80014bc:	f000 fb54 	bl	8001b68 <_realloc_r>
 80014c0:	4606      	mov	r6, r0
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1e2      	bne.n	800148c <__ssputs_r+0x70>
 80014c6:	6921      	ldr	r1, [r4, #16]
 80014c8:	4650      	mov	r0, sl
 80014ca:	f000 faa5 	bl	8001a18 <_free_r>
 80014ce:	e7c8      	b.n	8001462 <__ssputs_r+0x46>

080014d0 <_svfiprintf_r>:
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	461d      	mov	r5, r3
 80014d6:	898b      	ldrh	r3, [r1, #12]
 80014d8:	061f      	lsls	r7, r3, #24
 80014da:	b09d      	sub	sp, #116	; 0x74
 80014dc:	4680      	mov	r8, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	4616      	mov	r6, r2
 80014e2:	d50f      	bpl.n	8001504 <_svfiprintf_r+0x34>
 80014e4:	690b      	ldr	r3, [r1, #16]
 80014e6:	b96b      	cbnz	r3, 8001504 <_svfiprintf_r+0x34>
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	f000 fae3 	bl	8001ab4 <_malloc_r>
 80014ee:	6020      	str	r0, [r4, #0]
 80014f0:	6120      	str	r0, [r4, #16]
 80014f2:	b928      	cbnz	r0, 8001500 <_svfiprintf_r+0x30>
 80014f4:	230c      	movs	r3, #12
 80014f6:	f8c8 3000 	str.w	r3, [r8]
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	e0c8      	b.n	8001692 <_svfiprintf_r+0x1c2>
 8001500:	2340      	movs	r3, #64	; 0x40
 8001502:	6163      	str	r3, [r4, #20]
 8001504:	2300      	movs	r3, #0
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	2320      	movs	r3, #32
 800150a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800150e:	2330      	movs	r3, #48	; 0x30
 8001510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001514:	9503      	str	r5, [sp, #12]
 8001516:	f04f 0b01 	mov.w	fp, #1
 800151a:	4637      	mov	r7, r6
 800151c:	463d      	mov	r5, r7
 800151e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001522:	b10b      	cbz	r3, 8001528 <_svfiprintf_r+0x58>
 8001524:	2b25      	cmp	r3, #37	; 0x25
 8001526:	d13e      	bne.n	80015a6 <_svfiprintf_r+0xd6>
 8001528:	ebb7 0a06 	subs.w	sl, r7, r6
 800152c:	d00b      	beq.n	8001546 <_svfiprintf_r+0x76>
 800152e:	4653      	mov	r3, sl
 8001530:	4632      	mov	r2, r6
 8001532:	4621      	mov	r1, r4
 8001534:	4640      	mov	r0, r8
 8001536:	f7ff ff71 	bl	800141c <__ssputs_r>
 800153a:	3001      	adds	r0, #1
 800153c:	f000 80a4 	beq.w	8001688 <_svfiprintf_r+0x1b8>
 8001540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001542:	4453      	add	r3, sl
 8001544:	9309      	str	r3, [sp, #36]	; 0x24
 8001546:	783b      	ldrb	r3, [r7, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 809d 	beq.w	8001688 <_svfiprintf_r+0x1b8>
 800154e:	2300      	movs	r3, #0
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001558:	9304      	str	r3, [sp, #16]
 800155a:	9307      	str	r3, [sp, #28]
 800155c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001560:	931a      	str	r3, [sp, #104]	; 0x68
 8001562:	462f      	mov	r7, r5
 8001564:	2205      	movs	r2, #5
 8001566:	f817 1b01 	ldrb.w	r1, [r7], #1
 800156a:	4850      	ldr	r0, [pc, #320]	; (80016ac <_svfiprintf_r+0x1dc>)
 800156c:	f7fe fe38 	bl	80001e0 <memchr>
 8001570:	9b04      	ldr	r3, [sp, #16]
 8001572:	b9d0      	cbnz	r0, 80015aa <_svfiprintf_r+0xda>
 8001574:	06d9      	lsls	r1, r3, #27
 8001576:	bf44      	itt	mi
 8001578:	2220      	movmi	r2, #32
 800157a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800157e:	071a      	lsls	r2, r3, #28
 8001580:	bf44      	itt	mi
 8001582:	222b      	movmi	r2, #43	; 0x2b
 8001584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001588:	782a      	ldrb	r2, [r5, #0]
 800158a:	2a2a      	cmp	r2, #42	; 0x2a
 800158c:	d015      	beq.n	80015ba <_svfiprintf_r+0xea>
 800158e:	9a07      	ldr	r2, [sp, #28]
 8001590:	462f      	mov	r7, r5
 8001592:	2000      	movs	r0, #0
 8001594:	250a      	movs	r5, #10
 8001596:	4639      	mov	r1, r7
 8001598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800159c:	3b30      	subs	r3, #48	; 0x30
 800159e:	2b09      	cmp	r3, #9
 80015a0:	d94d      	bls.n	800163e <_svfiprintf_r+0x16e>
 80015a2:	b1b8      	cbz	r0, 80015d4 <_svfiprintf_r+0x104>
 80015a4:	e00f      	b.n	80015c6 <_svfiprintf_r+0xf6>
 80015a6:	462f      	mov	r7, r5
 80015a8:	e7b8      	b.n	800151c <_svfiprintf_r+0x4c>
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <_svfiprintf_r+0x1dc>)
 80015ac:	1a80      	subs	r0, r0, r2
 80015ae:	fa0b f000 	lsl.w	r0, fp, r0
 80015b2:	4318      	orrs	r0, r3
 80015b4:	9004      	str	r0, [sp, #16]
 80015b6:	463d      	mov	r5, r7
 80015b8:	e7d3      	b.n	8001562 <_svfiprintf_r+0x92>
 80015ba:	9a03      	ldr	r2, [sp, #12]
 80015bc:	1d11      	adds	r1, r2, #4
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	9103      	str	r1, [sp, #12]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	db01      	blt.n	80015ca <_svfiprintf_r+0xfa>
 80015c6:	9207      	str	r2, [sp, #28]
 80015c8:	e004      	b.n	80015d4 <_svfiprintf_r+0x104>
 80015ca:	4252      	negs	r2, r2
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	9207      	str	r2, [sp, #28]
 80015d2:	9304      	str	r3, [sp, #16]
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	2b2e      	cmp	r3, #46	; 0x2e
 80015d8:	d10c      	bne.n	80015f4 <_svfiprintf_r+0x124>
 80015da:	787b      	ldrb	r3, [r7, #1]
 80015dc:	2b2a      	cmp	r3, #42	; 0x2a
 80015de:	d133      	bne.n	8001648 <_svfiprintf_r+0x178>
 80015e0:	9b03      	ldr	r3, [sp, #12]
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	9203      	str	r2, [sp, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bfb8      	it	lt
 80015ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80015f0:	3702      	adds	r7, #2
 80015f2:	9305      	str	r3, [sp, #20]
 80015f4:	4d2e      	ldr	r5, [pc, #184]	; (80016b0 <_svfiprintf_r+0x1e0>)
 80015f6:	7839      	ldrb	r1, [r7, #0]
 80015f8:	2203      	movs	r2, #3
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7fe fdf0 	bl	80001e0 <memchr>
 8001600:	b138      	cbz	r0, 8001612 <_svfiprintf_r+0x142>
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	1b40      	subs	r0, r0, r5
 8001606:	fa03 f000 	lsl.w	r0, r3, r0
 800160a:	9b04      	ldr	r3, [sp, #16]
 800160c:	4303      	orrs	r3, r0
 800160e:	3701      	adds	r7, #1
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	7839      	ldrb	r1, [r7, #0]
 8001614:	4827      	ldr	r0, [pc, #156]	; (80016b4 <_svfiprintf_r+0x1e4>)
 8001616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800161a:	2206      	movs	r2, #6
 800161c:	1c7e      	adds	r6, r7, #1
 800161e:	f7fe fddf 	bl	80001e0 <memchr>
 8001622:	2800      	cmp	r0, #0
 8001624:	d038      	beq.n	8001698 <_svfiprintf_r+0x1c8>
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <_svfiprintf_r+0x1e8>)
 8001628:	bb13      	cbnz	r3, 8001670 <_svfiprintf_r+0x1a0>
 800162a:	9b03      	ldr	r3, [sp, #12]
 800162c:	3307      	adds	r3, #7
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	3308      	adds	r3, #8
 8001634:	9303      	str	r3, [sp, #12]
 8001636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001638:	444b      	add	r3, r9
 800163a:	9309      	str	r3, [sp, #36]	; 0x24
 800163c:	e76d      	b.n	800151a <_svfiprintf_r+0x4a>
 800163e:	fb05 3202 	mla	r2, r5, r2, r3
 8001642:	2001      	movs	r0, #1
 8001644:	460f      	mov	r7, r1
 8001646:	e7a6      	b.n	8001596 <_svfiprintf_r+0xc6>
 8001648:	2300      	movs	r3, #0
 800164a:	3701      	adds	r7, #1
 800164c:	9305      	str	r3, [sp, #20]
 800164e:	4619      	mov	r1, r3
 8001650:	250a      	movs	r5, #10
 8001652:	4638      	mov	r0, r7
 8001654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001658:	3a30      	subs	r2, #48	; 0x30
 800165a:	2a09      	cmp	r2, #9
 800165c:	d903      	bls.n	8001666 <_svfiprintf_r+0x196>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0c8      	beq.n	80015f4 <_svfiprintf_r+0x124>
 8001662:	9105      	str	r1, [sp, #20]
 8001664:	e7c6      	b.n	80015f4 <_svfiprintf_r+0x124>
 8001666:	fb05 2101 	mla	r1, r5, r1, r2
 800166a:	2301      	movs	r3, #1
 800166c:	4607      	mov	r7, r0
 800166e:	e7f0      	b.n	8001652 <_svfiprintf_r+0x182>
 8001670:	ab03      	add	r3, sp, #12
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4622      	mov	r2, r4
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_svfiprintf_r+0x1ec>)
 8001678:	a904      	add	r1, sp, #16
 800167a:	4640      	mov	r0, r8
 800167c:	f3af 8000 	nop.w
 8001680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001684:	4681      	mov	r9, r0
 8001686:	d1d6      	bne.n	8001636 <_svfiprintf_r+0x166>
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	065b      	lsls	r3, r3, #25
 800168c:	f53f af35 	bmi.w	80014fa <_svfiprintf_r+0x2a>
 8001690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001692:	b01d      	add	sp, #116	; 0x74
 8001694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001698:	ab03      	add	r3, sp, #12
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4622      	mov	r2, r4
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_svfiprintf_r+0x1ec>)
 80016a0:	a904      	add	r1, sp, #16
 80016a2:	4640      	mov	r0, r8
 80016a4:	f000 f882 	bl	80017ac <_printf_i>
 80016a8:	e7ea      	b.n	8001680 <_svfiprintf_r+0x1b0>
 80016aa:	bf00      	nop
 80016ac:	08001c20 	.word	0x08001c20
 80016b0:	08001c26 	.word	0x08001c26
 80016b4:	08001c2a 	.word	0x08001c2a
 80016b8:	00000000 	.word	0x00000000
 80016bc:	0800141d 	.word	0x0800141d

080016c0 <_printf_common>:
 80016c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016c4:	4691      	mov	r9, r2
 80016c6:	461f      	mov	r7, r3
 80016c8:	688a      	ldr	r2, [r1, #8]
 80016ca:	690b      	ldr	r3, [r1, #16]
 80016cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016d0:	4293      	cmp	r3, r2
 80016d2:	bfb8      	it	lt
 80016d4:	4613      	movlt	r3, r2
 80016d6:	f8c9 3000 	str.w	r3, [r9]
 80016da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016de:	4606      	mov	r6, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	b112      	cbz	r2, 80016ea <_printf_common+0x2a>
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c9 3000 	str.w	r3, [r9]
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	0699      	lsls	r1, r3, #26
 80016ee:	bf42      	ittt	mi
 80016f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80016f4:	3302      	addmi	r3, #2
 80016f6:	f8c9 3000 	strmi.w	r3, [r9]
 80016fa:	6825      	ldr	r5, [r4, #0]
 80016fc:	f015 0506 	ands.w	r5, r5, #6
 8001700:	d107      	bne.n	8001712 <_printf_common+0x52>
 8001702:	f104 0a19 	add.w	sl, r4, #25
 8001706:	68e3      	ldr	r3, [r4, #12]
 8001708:	f8d9 2000 	ldr.w	r2, [r9]
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	42ab      	cmp	r3, r5
 8001710:	dc28      	bgt.n	8001764 <_printf_common+0xa4>
 8001712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	3300      	adds	r3, #0
 800171a:	bf18      	it	ne
 800171c:	2301      	movne	r3, #1
 800171e:	0692      	lsls	r2, r2, #26
 8001720:	d42d      	bmi.n	800177e <_printf_common+0xbe>
 8001722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001726:	4639      	mov	r1, r7
 8001728:	4630      	mov	r0, r6
 800172a:	47c0      	blx	r8
 800172c:	3001      	adds	r0, #1
 800172e:	d020      	beq.n	8001772 <_printf_common+0xb2>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	68e5      	ldr	r5, [r4, #12]
 8001734:	f8d9 2000 	ldr.w	r2, [r9]
 8001738:	f003 0306 	and.w	r3, r3, #6
 800173c:	2b04      	cmp	r3, #4
 800173e:	bf08      	it	eq
 8001740:	1aad      	subeq	r5, r5, r2
 8001742:	68a3      	ldr	r3, [r4, #8]
 8001744:	6922      	ldr	r2, [r4, #16]
 8001746:	bf0c      	ite	eq
 8001748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800174c:	2500      	movne	r5, #0
 800174e:	4293      	cmp	r3, r2
 8001750:	bfc4      	itt	gt
 8001752:	1a9b      	subgt	r3, r3, r2
 8001754:	18ed      	addgt	r5, r5, r3
 8001756:	f04f 0900 	mov.w	r9, #0
 800175a:	341a      	adds	r4, #26
 800175c:	454d      	cmp	r5, r9
 800175e:	d11a      	bne.n	8001796 <_printf_common+0xd6>
 8001760:	2000      	movs	r0, #0
 8001762:	e008      	b.n	8001776 <_printf_common+0xb6>
 8001764:	2301      	movs	r3, #1
 8001766:	4652      	mov	r2, sl
 8001768:	4639      	mov	r1, r7
 800176a:	4630      	mov	r0, r6
 800176c:	47c0      	blx	r8
 800176e:	3001      	adds	r0, #1
 8001770:	d103      	bne.n	800177a <_printf_common+0xba>
 8001772:	f04f 30ff 	mov.w	r0, #4294967295
 8001776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800177a:	3501      	adds	r5, #1
 800177c:	e7c3      	b.n	8001706 <_printf_common+0x46>
 800177e:	18e1      	adds	r1, r4, r3
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	2030      	movs	r0, #48	; 0x30
 8001784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001788:	4422      	add	r2, r4
 800178a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800178e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001792:	3302      	adds	r3, #2
 8001794:	e7c5      	b.n	8001722 <_printf_common+0x62>
 8001796:	2301      	movs	r3, #1
 8001798:	4622      	mov	r2, r4
 800179a:	4639      	mov	r1, r7
 800179c:	4630      	mov	r0, r6
 800179e:	47c0      	blx	r8
 80017a0:	3001      	adds	r0, #1
 80017a2:	d0e6      	beq.n	8001772 <_printf_common+0xb2>
 80017a4:	f109 0901 	add.w	r9, r9, #1
 80017a8:	e7d8      	b.n	800175c <_printf_common+0x9c>
	...

080017ac <_printf_i>:
 80017ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80017b4:	460c      	mov	r4, r1
 80017b6:	7e09      	ldrb	r1, [r1, #24]
 80017b8:	b085      	sub	sp, #20
 80017ba:	296e      	cmp	r1, #110	; 0x6e
 80017bc:	4617      	mov	r7, r2
 80017be:	4606      	mov	r6, r0
 80017c0:	4698      	mov	r8, r3
 80017c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80017c4:	f000 80b3 	beq.w	800192e <_printf_i+0x182>
 80017c8:	d822      	bhi.n	8001810 <_printf_i+0x64>
 80017ca:	2963      	cmp	r1, #99	; 0x63
 80017cc:	d036      	beq.n	800183c <_printf_i+0x90>
 80017ce:	d80a      	bhi.n	80017e6 <_printf_i+0x3a>
 80017d0:	2900      	cmp	r1, #0
 80017d2:	f000 80b9 	beq.w	8001948 <_printf_i+0x19c>
 80017d6:	2958      	cmp	r1, #88	; 0x58
 80017d8:	f000 8083 	beq.w	80018e2 <_printf_i+0x136>
 80017dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80017e4:	e032      	b.n	800184c <_printf_i+0xa0>
 80017e6:	2964      	cmp	r1, #100	; 0x64
 80017e8:	d001      	beq.n	80017ee <_printf_i+0x42>
 80017ea:	2969      	cmp	r1, #105	; 0x69
 80017ec:	d1f6      	bne.n	80017dc <_printf_i+0x30>
 80017ee:	6820      	ldr	r0, [r4, #0]
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	0605      	lsls	r5, r0, #24
 80017f4:	f103 0104 	add.w	r1, r3, #4
 80017f8:	d52a      	bpl.n	8001850 <_printf_i+0xa4>
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6011      	str	r1, [r2, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da03      	bge.n	800180a <_printf_i+0x5e>
 8001802:	222d      	movs	r2, #45	; 0x2d
 8001804:	425b      	negs	r3, r3
 8001806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800180a:	486f      	ldr	r0, [pc, #444]	; (80019c8 <_printf_i+0x21c>)
 800180c:	220a      	movs	r2, #10
 800180e:	e039      	b.n	8001884 <_printf_i+0xd8>
 8001810:	2973      	cmp	r1, #115	; 0x73
 8001812:	f000 809d 	beq.w	8001950 <_printf_i+0x1a4>
 8001816:	d808      	bhi.n	800182a <_printf_i+0x7e>
 8001818:	296f      	cmp	r1, #111	; 0x6f
 800181a:	d020      	beq.n	800185e <_printf_i+0xb2>
 800181c:	2970      	cmp	r1, #112	; 0x70
 800181e:	d1dd      	bne.n	80017dc <_printf_i+0x30>
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	6023      	str	r3, [r4, #0]
 8001828:	e003      	b.n	8001832 <_printf_i+0x86>
 800182a:	2975      	cmp	r1, #117	; 0x75
 800182c:	d017      	beq.n	800185e <_printf_i+0xb2>
 800182e:	2978      	cmp	r1, #120	; 0x78
 8001830:	d1d4      	bne.n	80017dc <_printf_i+0x30>
 8001832:	2378      	movs	r3, #120	; 0x78
 8001834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001838:	4864      	ldr	r0, [pc, #400]	; (80019cc <_printf_i+0x220>)
 800183a:	e055      	b.n	80018e8 <_printf_i+0x13c>
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	1d19      	adds	r1, r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6011      	str	r1, [r2, #0]
 8001844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800184c:	2301      	movs	r3, #1
 800184e:	e08c      	b.n	800196a <_printf_i+0x1be>
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6011      	str	r1, [r2, #0]
 8001854:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001858:	bf18      	it	ne
 800185a:	b21b      	sxthne	r3, r3
 800185c:	e7cf      	b.n	80017fe <_printf_i+0x52>
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	6825      	ldr	r5, [r4, #0]
 8001862:	1d18      	adds	r0, r3, #4
 8001864:	6010      	str	r0, [r2, #0]
 8001866:	0628      	lsls	r0, r5, #24
 8001868:	d501      	bpl.n	800186e <_printf_i+0xc2>
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e002      	b.n	8001874 <_printf_i+0xc8>
 800186e:	0668      	lsls	r0, r5, #25
 8001870:	d5fb      	bpl.n	800186a <_printf_i+0xbe>
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4854      	ldr	r0, [pc, #336]	; (80019c8 <_printf_i+0x21c>)
 8001876:	296f      	cmp	r1, #111	; 0x6f
 8001878:	bf14      	ite	ne
 800187a:	220a      	movne	r2, #10
 800187c:	2208      	moveq	r2, #8
 800187e:	2100      	movs	r1, #0
 8001880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001884:	6865      	ldr	r5, [r4, #4]
 8001886:	60a5      	str	r5, [r4, #8]
 8001888:	2d00      	cmp	r5, #0
 800188a:	f2c0 8095 	blt.w	80019b8 <_printf_i+0x20c>
 800188e:	6821      	ldr	r1, [r4, #0]
 8001890:	f021 0104 	bic.w	r1, r1, #4
 8001894:	6021      	str	r1, [r4, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d13d      	bne.n	8001916 <_printf_i+0x16a>
 800189a:	2d00      	cmp	r5, #0
 800189c:	f040 808e 	bne.w	80019bc <_printf_i+0x210>
 80018a0:	4665      	mov	r5, ip
 80018a2:	2a08      	cmp	r2, #8
 80018a4:	d10b      	bne.n	80018be <_printf_i+0x112>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	d508      	bpl.n	80018be <_printf_i+0x112>
 80018ac:	6923      	ldr	r3, [r4, #16]
 80018ae:	6862      	ldr	r2, [r4, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	bfde      	ittt	le
 80018b4:	2330      	movle	r3, #48	; 0x30
 80018b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018be:	ebac 0305 	sub.w	r3, ip, r5
 80018c2:	6123      	str	r3, [r4, #16]
 80018c4:	f8cd 8000 	str.w	r8, [sp]
 80018c8:	463b      	mov	r3, r7
 80018ca:	aa03      	add	r2, sp, #12
 80018cc:	4621      	mov	r1, r4
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff fef6 	bl	80016c0 <_printf_common>
 80018d4:	3001      	adds	r0, #1
 80018d6:	d14d      	bne.n	8001974 <_printf_i+0x1c8>
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	b005      	add	sp, #20
 80018de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018e2:	4839      	ldr	r0, [pc, #228]	; (80019c8 <_printf_i+0x21c>)
 80018e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	6821      	ldr	r1, [r4, #0]
 80018ec:	1d1d      	adds	r5, r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6015      	str	r5, [r2, #0]
 80018f2:	060a      	lsls	r2, r1, #24
 80018f4:	d50b      	bpl.n	800190e <_printf_i+0x162>
 80018f6:	07ca      	lsls	r2, r1, #31
 80018f8:	bf44      	itt	mi
 80018fa:	f041 0120 	orrmi.w	r1, r1, #32
 80018fe:	6021      	strmi	r1, [r4, #0]
 8001900:	b91b      	cbnz	r3, 800190a <_printf_i+0x15e>
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	f022 0220 	bic.w	r2, r2, #32
 8001908:	6022      	str	r2, [r4, #0]
 800190a:	2210      	movs	r2, #16
 800190c:	e7b7      	b.n	800187e <_printf_i+0xd2>
 800190e:	064d      	lsls	r5, r1, #25
 8001910:	bf48      	it	mi
 8001912:	b29b      	uxthmi	r3, r3
 8001914:	e7ef      	b.n	80018f6 <_printf_i+0x14a>
 8001916:	4665      	mov	r5, ip
 8001918:	fbb3 f1f2 	udiv	r1, r3, r2
 800191c:	fb02 3311 	mls	r3, r2, r1, r3
 8001920:	5cc3      	ldrb	r3, [r0, r3]
 8001922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001926:	460b      	mov	r3, r1
 8001928:	2900      	cmp	r1, #0
 800192a:	d1f5      	bne.n	8001918 <_printf_i+0x16c>
 800192c:	e7b9      	b.n	80018a2 <_printf_i+0xf6>
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	6825      	ldr	r5, [r4, #0]
 8001932:	6961      	ldr	r1, [r4, #20]
 8001934:	1d18      	adds	r0, r3, #4
 8001936:	6010      	str	r0, [r2, #0]
 8001938:	0628      	lsls	r0, r5, #24
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	d501      	bpl.n	8001942 <_printf_i+0x196>
 800193e:	6019      	str	r1, [r3, #0]
 8001940:	e002      	b.n	8001948 <_printf_i+0x19c>
 8001942:	066a      	lsls	r2, r5, #25
 8001944:	d5fb      	bpl.n	800193e <_printf_i+0x192>
 8001946:	8019      	strh	r1, [r3, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	6123      	str	r3, [r4, #16]
 800194c:	4665      	mov	r5, ip
 800194e:	e7b9      	b.n	80018c4 <_printf_i+0x118>
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	1d19      	adds	r1, r3, #4
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	681d      	ldr	r5, [r3, #0]
 8001958:	6862      	ldr	r2, [r4, #4]
 800195a:	2100      	movs	r1, #0
 800195c:	4628      	mov	r0, r5
 800195e:	f7fe fc3f 	bl	80001e0 <memchr>
 8001962:	b108      	cbz	r0, 8001968 <_printf_i+0x1bc>
 8001964:	1b40      	subs	r0, r0, r5
 8001966:	6060      	str	r0, [r4, #4]
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	6123      	str	r3, [r4, #16]
 800196c:	2300      	movs	r3, #0
 800196e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001972:	e7a7      	b.n	80018c4 <_printf_i+0x118>
 8001974:	6923      	ldr	r3, [r4, #16]
 8001976:	462a      	mov	r2, r5
 8001978:	4639      	mov	r1, r7
 800197a:	4630      	mov	r0, r6
 800197c:	47c0      	blx	r8
 800197e:	3001      	adds	r0, #1
 8001980:	d0aa      	beq.n	80018d8 <_printf_i+0x12c>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	079b      	lsls	r3, r3, #30
 8001986:	d413      	bmi.n	80019b0 <_printf_i+0x204>
 8001988:	68e0      	ldr	r0, [r4, #12]
 800198a:	9b03      	ldr	r3, [sp, #12]
 800198c:	4298      	cmp	r0, r3
 800198e:	bfb8      	it	lt
 8001990:	4618      	movlt	r0, r3
 8001992:	e7a3      	b.n	80018dc <_printf_i+0x130>
 8001994:	2301      	movs	r3, #1
 8001996:	464a      	mov	r2, r9
 8001998:	4639      	mov	r1, r7
 800199a:	4630      	mov	r0, r6
 800199c:	47c0      	blx	r8
 800199e:	3001      	adds	r0, #1
 80019a0:	d09a      	beq.n	80018d8 <_printf_i+0x12c>
 80019a2:	3501      	adds	r5, #1
 80019a4:	68e3      	ldr	r3, [r4, #12]
 80019a6:	9a03      	ldr	r2, [sp, #12]
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	42ab      	cmp	r3, r5
 80019ac:	dcf2      	bgt.n	8001994 <_printf_i+0x1e8>
 80019ae:	e7eb      	b.n	8001988 <_printf_i+0x1dc>
 80019b0:	2500      	movs	r5, #0
 80019b2:	f104 0919 	add.w	r9, r4, #25
 80019b6:	e7f5      	b.n	80019a4 <_printf_i+0x1f8>
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ac      	bne.n	8001916 <_printf_i+0x16a>
 80019bc:	7803      	ldrb	r3, [r0, #0]
 80019be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019c6:	e76c      	b.n	80018a2 <_printf_i+0xf6>
 80019c8:	08001c31 	.word	0x08001c31
 80019cc:	08001c42 	.word	0x08001c42

080019d0 <memcpy>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	1e43      	subs	r3, r0, #1
 80019d4:	440a      	add	r2, r1
 80019d6:	4291      	cmp	r1, r2
 80019d8:	d100      	bne.n	80019dc <memcpy+0xc>
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019e4:	e7f7      	b.n	80019d6 <memcpy+0x6>

080019e6 <memmove>:
 80019e6:	4288      	cmp	r0, r1
 80019e8:	b510      	push	{r4, lr}
 80019ea:	eb01 0302 	add.w	r3, r1, r2
 80019ee:	d807      	bhi.n	8001a00 <memmove+0x1a>
 80019f0:	1e42      	subs	r2, r0, #1
 80019f2:	4299      	cmp	r1, r3
 80019f4:	d00a      	beq.n	8001a0c <memmove+0x26>
 80019f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80019fe:	e7f8      	b.n	80019f2 <memmove+0xc>
 8001a00:	4283      	cmp	r3, r0
 8001a02:	d9f5      	bls.n	80019f0 <memmove+0xa>
 8001a04:	1881      	adds	r1, r0, r2
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	42d3      	cmn	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <memmove+0x28>
 8001a0c:	bd10      	pop	{r4, pc}
 8001a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001a16:	e7f7      	b.n	8001a08 <memmove+0x22>

08001a18 <_free_r>:
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	d045      	beq.n	8001aac <_free_r+0x94>
 8001a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a24:	1f0c      	subs	r4, r1, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bfb8      	it	lt
 8001a2a:	18e4      	addlt	r4, r4, r3
 8001a2c:	f000 f8d2 	bl	8001bd4 <__malloc_lock>
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <_free_r+0x98>)
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	4610      	mov	r0, r2
 8001a36:	b933      	cbnz	r3, 8001a46 <_free_r+0x2e>
 8001a38:	6063      	str	r3, [r4, #4]
 8001a3a:	6014      	str	r4, [r2, #0]
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a42:	f000 b8c8 	b.w	8001bd6 <__malloc_unlock>
 8001a46:	42a3      	cmp	r3, r4
 8001a48:	d90c      	bls.n	8001a64 <_free_r+0x4c>
 8001a4a:	6821      	ldr	r1, [r4, #0]
 8001a4c:	1862      	adds	r2, r4, r1
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bf04      	itt	eq
 8001a52:	681a      	ldreq	r2, [r3, #0]
 8001a54:	685b      	ldreq	r3, [r3, #4]
 8001a56:	6063      	str	r3, [r4, #4]
 8001a58:	bf04      	itt	eq
 8001a5a:	1852      	addeq	r2, r2, r1
 8001a5c:	6022      	streq	r2, [r4, #0]
 8001a5e:	6004      	str	r4, [r0, #0]
 8001a60:	e7ec      	b.n	8001a3c <_free_r+0x24>
 8001a62:	4613      	mov	r3, r2
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	b10a      	cbz	r2, 8001a6c <_free_r+0x54>
 8001a68:	42a2      	cmp	r2, r4
 8001a6a:	d9fa      	bls.n	8001a62 <_free_r+0x4a>
 8001a6c:	6819      	ldr	r1, [r3, #0]
 8001a6e:	1858      	adds	r0, r3, r1
 8001a70:	42a0      	cmp	r0, r4
 8001a72:	d10b      	bne.n	8001a8c <_free_r+0x74>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	4401      	add	r1, r0
 8001a78:	1858      	adds	r0, r3, r1
 8001a7a:	4282      	cmp	r2, r0
 8001a7c:	6019      	str	r1, [r3, #0]
 8001a7e:	d1dd      	bne.n	8001a3c <_free_r+0x24>
 8001a80:	6810      	ldr	r0, [r2, #0]
 8001a82:	6852      	ldr	r2, [r2, #4]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	4401      	add	r1, r0
 8001a88:	6019      	str	r1, [r3, #0]
 8001a8a:	e7d7      	b.n	8001a3c <_free_r+0x24>
 8001a8c:	d902      	bls.n	8001a94 <_free_r+0x7c>
 8001a8e:	230c      	movs	r3, #12
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	e7d3      	b.n	8001a3c <_free_r+0x24>
 8001a94:	6820      	ldr	r0, [r4, #0]
 8001a96:	1821      	adds	r1, r4, r0
 8001a98:	428a      	cmp	r2, r1
 8001a9a:	bf04      	itt	eq
 8001a9c:	6811      	ldreq	r1, [r2, #0]
 8001a9e:	6852      	ldreq	r2, [r2, #4]
 8001aa0:	6062      	str	r2, [r4, #4]
 8001aa2:	bf04      	itt	eq
 8001aa4:	1809      	addeq	r1, r1, r0
 8001aa6:	6021      	streq	r1, [r4, #0]
 8001aa8:	605c      	str	r4, [r3, #4]
 8001aaa:	e7c7      	b.n	8001a3c <_free_r+0x24>
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000088 	.word	0x20000088

08001ab4 <_malloc_r>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	1ccd      	adds	r5, r1, #3
 8001ab8:	f025 0503 	bic.w	r5, r5, #3
 8001abc:	3508      	adds	r5, #8
 8001abe:	2d0c      	cmp	r5, #12
 8001ac0:	bf38      	it	cc
 8001ac2:	250c      	movcc	r5, #12
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	4606      	mov	r6, r0
 8001ac8:	db01      	blt.n	8001ace <_malloc_r+0x1a>
 8001aca:	42a9      	cmp	r1, r5
 8001acc:	d903      	bls.n	8001ad6 <_malloc_r+0x22>
 8001ace:	230c      	movs	r3, #12
 8001ad0:	6033      	str	r3, [r6, #0]
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	f000 f87d 	bl	8001bd4 <__malloc_lock>
 8001ada:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <_malloc_r+0xac>)
 8001adc:	6814      	ldr	r4, [r2, #0]
 8001ade:	4621      	mov	r1, r4
 8001ae0:	b991      	cbnz	r1, 8001b08 <_malloc_r+0x54>
 8001ae2:	4c20      	ldr	r4, [pc, #128]	; (8001b64 <_malloc_r+0xb0>)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	b91b      	cbnz	r3, 8001af0 <_malloc_r+0x3c>
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f000 f863 	bl	8001bb4 <_sbrk_r>
 8001aee:	6020      	str	r0, [r4, #0]
 8001af0:	4629      	mov	r1, r5
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 f85e 	bl	8001bb4 <_sbrk_r>
 8001af8:	1c43      	adds	r3, r0, #1
 8001afa:	d124      	bne.n	8001b46 <_malloc_r+0x92>
 8001afc:	230c      	movs	r3, #12
 8001afe:	6033      	str	r3, [r6, #0]
 8001b00:	4630      	mov	r0, r6
 8001b02:	f000 f868 	bl	8001bd6 <__malloc_unlock>
 8001b06:	e7e4      	b.n	8001ad2 <_malloc_r+0x1e>
 8001b08:	680b      	ldr	r3, [r1, #0]
 8001b0a:	1b5b      	subs	r3, r3, r5
 8001b0c:	d418      	bmi.n	8001b40 <_malloc_r+0x8c>
 8001b0e:	2b0b      	cmp	r3, #11
 8001b10:	d90f      	bls.n	8001b32 <_malloc_r+0x7e>
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	50cd      	str	r5, [r1, r3]
 8001b16:	18cc      	adds	r4, r1, r3
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f000 f85c 	bl	8001bd6 <__malloc_unlock>
 8001b1e:	f104 000b 	add.w	r0, r4, #11
 8001b22:	1d23      	adds	r3, r4, #4
 8001b24:	f020 0007 	bic.w	r0, r0, #7
 8001b28:	1ac3      	subs	r3, r0, r3
 8001b2a:	d0d3      	beq.n	8001ad4 <_malloc_r+0x20>
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	50e2      	str	r2, [r4, r3]
 8001b30:	e7d0      	b.n	8001ad4 <_malloc_r+0x20>
 8001b32:	428c      	cmp	r4, r1
 8001b34:	684b      	ldr	r3, [r1, #4]
 8001b36:	bf16      	itet	ne
 8001b38:	6063      	strne	r3, [r4, #4]
 8001b3a:	6013      	streq	r3, [r2, #0]
 8001b3c:	460c      	movne	r4, r1
 8001b3e:	e7eb      	b.n	8001b18 <_malloc_r+0x64>
 8001b40:	460c      	mov	r4, r1
 8001b42:	6849      	ldr	r1, [r1, #4]
 8001b44:	e7cc      	b.n	8001ae0 <_malloc_r+0x2c>
 8001b46:	1cc4      	adds	r4, r0, #3
 8001b48:	f024 0403 	bic.w	r4, r4, #3
 8001b4c:	42a0      	cmp	r0, r4
 8001b4e:	d005      	beq.n	8001b5c <_malloc_r+0xa8>
 8001b50:	1a21      	subs	r1, r4, r0
 8001b52:	4630      	mov	r0, r6
 8001b54:	f000 f82e 	bl	8001bb4 <_sbrk_r>
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d0cf      	beq.n	8001afc <_malloc_r+0x48>
 8001b5c:	6025      	str	r5, [r4, #0]
 8001b5e:	e7db      	b.n	8001b18 <_malloc_r+0x64>
 8001b60:	20000088 	.word	0x20000088
 8001b64:	2000008c 	.word	0x2000008c

08001b68 <_realloc_r>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	4607      	mov	r7, r0
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	460e      	mov	r6, r1
 8001b70:	b921      	cbnz	r1, 8001b7c <_realloc_r+0x14>
 8001b72:	4611      	mov	r1, r2
 8001b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001b78:	f7ff bf9c 	b.w	8001ab4 <_malloc_r>
 8001b7c:	b922      	cbnz	r2, 8001b88 <_realloc_r+0x20>
 8001b7e:	f7ff ff4b 	bl	8001a18 <_free_r>
 8001b82:	4625      	mov	r5, r4
 8001b84:	4628      	mov	r0, r5
 8001b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b88:	f000 f826 	bl	8001bd8 <_malloc_usable_size_r>
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d20f      	bcs.n	8001bb0 <_realloc_r+0x48>
 8001b90:	4621      	mov	r1, r4
 8001b92:	4638      	mov	r0, r7
 8001b94:	f7ff ff8e 	bl	8001ab4 <_malloc_r>
 8001b98:	4605      	mov	r5, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d0f2      	beq.n	8001b84 <_realloc_r+0x1c>
 8001b9e:	4631      	mov	r1, r6
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	f7ff ff15 	bl	80019d0 <memcpy>
 8001ba6:	4631      	mov	r1, r6
 8001ba8:	4638      	mov	r0, r7
 8001baa:	f7ff ff35 	bl	8001a18 <_free_r>
 8001bae:	e7e9      	b.n	8001b84 <_realloc_r+0x1c>
 8001bb0:	4635      	mov	r5, r6
 8001bb2:	e7e7      	b.n	8001b84 <_realloc_r+0x1c>

08001bb4 <_sbrk_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4c06      	ldr	r4, [pc, #24]	; (8001bd0 <_sbrk_r+0x1c>)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	4605      	mov	r5, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	6023      	str	r3, [r4, #0]
 8001bc0:	f7ff fb58 	bl	8001274 <_sbrk>
 8001bc4:	1c43      	adds	r3, r0, #1
 8001bc6:	d102      	bne.n	8001bce <_sbrk_r+0x1a>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	b103      	cbz	r3, 8001bce <_sbrk_r+0x1a>
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	bd38      	pop	{r3, r4, r5, pc}
 8001bd0:	20000094 	.word	0x20000094

08001bd4 <__malloc_lock>:
 8001bd4:	4770      	bx	lr

08001bd6 <__malloc_unlock>:
 8001bd6:	4770      	bx	lr

08001bd8 <_malloc_usable_size_r>:
 8001bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bdc:	1f18      	subs	r0, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bfbc      	itt	lt
 8001be2:	580b      	ldrlt	r3, [r1, r0]
 8001be4:	18c0      	addlt	r0, r0, r3
 8001be6:	4770      	bx	lr

08001be8 <_init>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr

08001bf4 <_fini>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	bf00      	nop
 8001bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfa:	bc08      	pop	{r3}
 8001bfc:	469e      	mov	lr, r3
 8001bfe:	4770      	bx	lr
