
tremolo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001134  08001134  00011134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800116c  0800116c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800116c  0800116c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800116c  0800116c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  080011dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080011dc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003064  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008a2  00000000  00000000  000230fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000260  00000000  00000000  000239a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000208  00000000  00000000  00023c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c82  00000000  00000000  00023e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000025e1  00000000  00000000  00038a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084277  00000000  00000000  0003b06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  000bf360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800111c 	.word	0x0800111c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800111c 	.word	0x0800111c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <TIM2_IRQHandler>:
 * should always be between MINRATE and MAXRATE */
int rate = 0;

// -------------------------------------------------ISRs--------------------------------------------------------------------

void TIM2_IRQHandler(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	TIM2->SR = 0;	// clears the interrupt flag UIF
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]

	update_rate();
 800031c:	f000 f8ca 	bl	80004b4 <update_rate>
	update_depth();
 8000320:	f000 f8fa 	bl	8000518 <update_depth>

	// reset interrupt
	control_sample_timer_config();
 8000324:	f000 f89c 	bl	8000460 <control_sample_timer_config>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <main>:


int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0

	ADC_init();
 8000332:	f000 f82b 	bl	800038c <ADC_init>
	LED_init();
 8000336:	f000 f921 	bl	800057c <LED_init>
	USART2_init();
 800033a:	f000 f9af 	bl	800069c <USART2_init>

	control_sample_timer_config();
 800033e:	f000 f88f 	bl	8000460 <control_sample_timer_config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i

	 // set up interrupts
	 __disable_irq(); // disables the global interrupt request
	 NVIC_EnableIRQ(TIM2_IRQn);				// enables the tim2 interrupt
 8000344:	201c      	movs	r0, #28
 8000346:	f7ff ff9b 	bl	8000280 <__NVIC_EnableIRQ>
	 NVIC_SetPriority(TIM2_IRQn, CONTROL_SAMPLE_PRIO);	// sets the timer priority
 800034a:	2103      	movs	r1, #3
 800034c:	201c      	movs	r0, #28
 800034e:	f7ff ffb5 	bl	80002bc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000352:	b662      	cpsie	i
	 __enable_irq();

	while(1) {

		char send[10];
		sprintf(send, "$%d;", depth);
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <main+0x54>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	490a      	ldr	r1, [pc, #40]	; (8000384 <main+0x58>)
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fad7 	bl	8000910 <siprintf>
		myprint(send);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f97d 	bl	8000664 <myprint>

		// need to paramatarize between acceptable time threasholds
		LED_toggle();
 800036a:	f000 f929 	bl	80005c0 <LED_toggle>
		delay_ms(rate/2);
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <main+0x5c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	0fda      	lsrs	r2, r3, #31
 8000374:	4413      	add	r3, r2
 8000376:	105b      	asrs	r3, r3, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f931 	bl	80005e0 <delay_ms>
	while(1) {
 800037e:	e7e9      	b.n	8000354 <main+0x28>
 8000380:	20000084 	.word	0x20000084
 8000384:	08001134 	.word	0x08001134
 8000388:	20000088 	.word	0x20000088

0800038c <ADC_init>:
/**
 * Initializes ADC to read both the Depth (PA0) and Rate (PA1)
 * Set up ADC to read both values on a read conversation
 * TODO: could update this to read PA0 and then PA1 in one read...
 */
void ADC_init(void) {
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;	            /* enable GPIOA clock */
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <ADC_init+0x5c>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <ADC_init+0x5c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0xC;           /* PA1 analog mode Rate */
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <ADC_init+0x60>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a12      	ldr	r2, [pc, #72]	; (80003ec <ADC_init+0x60>)
 80003a2:	f043 030c 	orr.w	r3, r3, #12
 80003a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x3;		  /* PA0 to analog mode Depth Control*/
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <ADC_init+0x60>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <ADC_init+0x60>)
 80003ae:	f043 0303 	orr.w	r3, r3, #3
 80003b2:	6013      	str	r3, [r2, #0]

    /* setup ADC1 to read starting at PA0 */
    RCC->APB2ENR |= 0x00000100;     /* enable ADC1 clock */
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <ADC_init+0x5c>)
 80003b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <ADC_init+0x5c>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003be:	6453      	str	r3, [r2, #68]	; 0x44
    ADC1->CR2 = 0;                  /* SW trigger */
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <ADC_init+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;                 /* conversion sequence starts at ch 0 */
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <ADC_init+0x64>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = 0;                 /* conversion sequence length 1 */
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <ADC_init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
    ADC1->CR2 |= 1;                 /* enable ADC1 */
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <ADC_init+0x64>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <ADC_init+0x64>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6093      	str	r3, [r2, #8]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40012000 	.word	0x40012000

080003f4 <read_pot_percent>:

/** returns the float percentage of the ADC - based off resolution of the ADC */
float read_pot_percent(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	return (float)read_ADC_step() / (ADC_RES);
 80003f8:	f000 f812 	bl	8000420 <read_ADC_step>
 80003fc:	ee07 0a90 	vmov	s15, r0
 8000400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000404:	eddf 7a05 	vldr	s15, [pc, #20]	; 800041c <read_pot_percent+0x28>
 8000408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800040c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000410:	eef0 7a66 	vmov.f32	s15, s13
}
 8000414:	eeb0 0a67 	vmov.f32	s0, s15
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	00001000 	.word	0x00001000

08000420 <read_ADC_step>:

/** returns the discrete value between 0 and RES */
int read_ADC_step(void) {
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x00000100;     /* enable ADC1 clock */
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <read_ADC_step+0x38>)
 8000426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <read_ADC_step+0x38>)
 800042a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042e:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR2 |= 0x40000000;        /* start a conversion */
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <read_ADC_step+0x3c>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a09      	ldr	r2, [pc, #36]	; (800045c <read_ADC_step+0x3c>)
 8000436:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800043a:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)) {}       /* wait for conv complete */
 800043c:	bf00      	nop
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <read_ADC_step+0x3c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <read_ADC_step+0x1e>

	return (ADC1->DR);
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <read_ADC_step+0x3c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40023800 	.word	0x40023800
 800045c:	40012000 	.word	0x40012000

08000460 <control_sample_timer_config>:

/**
 * Using TIM2 sets a triggers an interrupt every control_sample_time micro seconds
 */
void control_sample_timer_config(void) {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	// set up timer to to interrupt when we should sample
	RCC->APB1ENR |= 1;              /* enable TIM2 clock */
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <control_sample_timer_config+0x4c>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <control_sample_timer_config+0x4c>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16-1;               /* divided by 16  (use N-1) - dividing by 16 gets in in u sec*/
 8000470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000474:	220f      	movs	r2, #15
 8000476:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = control_sample_time-1;              /* sampling frequency is the number of micro seconds to count to*/
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <control_sample_timer_config+0x50>)
 800047a:	1e5a      	subs	r2, r3, #1
 800047c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;                  /* clear timer counter */
 8000482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = 1;                  /* enable TIM2 */
 800048a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048e:	2201      	movs	r2, #1
 8000490:	601a      	str	r2, [r3, #0]

	TIM2->DIER |= 1;				// enable the Update Interrupt Enable
 8000492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	60d3      	str	r3, [r2, #12]
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40023800 	.word	0x40023800
 80004b0:	000186a0 	.word	0x000186a0

080004b4 <update_rate>:

// ------------------------------------------------- Control Functions ---------------------------------------------------
/** Reads Rate Pot PA1 and updates rate global variable */
void update_rate(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	ADC1->SQR3 = 1;                 /* conversion sequence starts at ch 1 which maps to PA1 */
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <update_rate+0x58>)
 80004bc:	2201      	movs	r2, #1
 80004be:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= 1;                 /* enable ADC1 */
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <update_rate+0x58>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <update_rate+0x58>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6093      	str	r3, [r2, #8]
	float pot_perc = read_pot_percent();
 80004cc:	f7ff ff92 	bl	80003f4 <read_pot_percent>
 80004d0:	ed87 0a01 	vstr	s0, [r7, #4]
	rate = (pot_perc * (MAXRATE - MINRATE)) + MINRATE;
 80004d4:	2264      	movs	r2, #100	; 0x64
 80004d6:	f240 134d 	movw	r3, #333	; 0x14d
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	ee07 3a90 	vmov	s15, r3
 80004e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80004e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000510 <update_rate+0x5c>
 80004f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004fc:	ee17 2a90 	vmov	r2, s15
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <update_rate+0x60>)
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40012000 	.word	0x40012000
 8000510:	0000014d 	.word	0x0000014d
 8000514:	20000088 	.word	0x20000088

08000518 <update_depth>:

/** Reads Depth Pot PA0 and updates depth global variable */
void update_depth(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	ADC1->SQR3 = 0;                 /* conversion sequence starts at ch 0 which maps to PA0 */
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <update_depth+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= 1;                 /* enable ADC1 */
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <update_depth+0x58>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <update_depth+0x58>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6093      	str	r3, [r2, #8]
	float pot_perc = read_pot_percent();
 8000530:	f7ff ff60 	bl	80003f4 <read_pot_percent>
 8000534:	ed87 0a01 	vstr	s0, [r7, #4]
	depth = (pot_perc * (MAXDEPTH - MINDEPTH)) + MINDEPTH;
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000548:	edd7 7a01 	vldr	s15, [r7, #4]
 800054c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000550:	eddf 7a08 	vldr	s15, [pc, #32]	; 8000574 <update_depth+0x5c>
 8000554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800055c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000560:	ee17 2a90 	vmov	r2, s15
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <update_depth+0x60>)
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40012000 	.word	0x40012000
 8000574:	00000400 	.word	0x00000400
 8000578:	20000084 	.word	0x20000084

0800057c <LED_init>:

// --------------------------------------------------Utility Functions-----------------------------------------------------

void LED_init(void) {
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
    // configure PA5 as output to drive the LED
    RCC->AHB1ENR |=  1;             /* enable GPIOA clock */
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <LED_init+0x3c>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <LED_init+0x3c>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x00000C00;    /* clear pin mode */
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <LED_init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LED_init+0x40>)
 8000592:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000596:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;    /* set pin to output mode */
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LED_init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <LED_init+0x40>)
 800059e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a2:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR   = (1<<21);        /* Turn LED off           */
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LED_init+0x40>)
 80005a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005aa:	619a      	str	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020000 	.word	0x40020000

080005c0 <LED_toggle>:


void LED_toggle(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
    GPIOA->ODR ^=0x20;              /* Toggle LED            */
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LED_toggle+0x1c>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <LED_toggle+0x1c>)
 80005ca:	f083 0320 	eor.w	r3, r3, #32
 80005ce:	6153      	str	r3, [r2, #20]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40020000 	.word	0x40020000

080005e0 <delay_ms>:

void delay_ms(uint32_t val) {
 80005e0:	b480      	push	{r7}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    // Using SysTick Timer:
    //        A delay function that can stall CPU 1msec to 100 sec, depending on val.

	uint32_t sysClk = 16000000; //Hz
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <delay_ms+0x78>)
 80005ea:	613b      	str	r3, [r7, #16]
	float time = 0.001; //sec
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <delay_ms+0x7c>)
 80005ee:	60fb      	str	r3, [r7, #12]
    SysTick->LOAD =  (sysClk * time) - 1;    /* reload with number of clocks per millisecond (use N-1)*/
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	ee07 3a90 	vmov	s15, r3
 80005f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80005fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <delay_ms+0x80>)
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 2a90 	vmov	r2, s15
 8000614:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;          /* clear current value register */
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <delay_ms+0x80>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x05;      /* Enable the timer */
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <delay_ms+0x80>)
 800061e:	2205      	movs	r2, #5
 8000620:	601a      	str	r2, [r3, #0]

    for (uint32_t i=0; i<val; i++){
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e009      	b.n	800063c <delay_ms+0x5c>
            while((SysTick->CTRL & 0x10000) == 0); /* wait until the COUNTFLAG is set */
 8000628:	bf00      	nop
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <delay_ms+0x80>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <delay_ms+0x4a>
    for (uint32_t i=0; i<val; i++){
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d3f1      	bcc.n	8000628 <delay_ms+0x48>
        }

    SysTick->CTRL = 0; 	/* Stop the timer (Enable = 0) */
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <delay_ms+0x80>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]

}
 800064a:	bf00      	nop
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	00f42400 	.word	0x00f42400
 800065c:	3a83126f 	.word	0x3a83126f
 8000660:	e000e010 	.word	0xe000e010

08000664 <myprint>:

void myprint(char msg[]){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint8_t idx=0;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
	while(msg[idx]!='\0' ){
 8000670:	e009      	b.n	8000686 <myprint+0x22>
		USART2_write(msg[idx++]);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	73fa      	strb	r2, [r7, #15]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f84f 	bl	8000724 <USART2_write>
	while(msg[idx]!='\0' ){
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1ef      	bne.n	8000672 <myprint+0xe>
	}
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <USART2_init>:

/* initialize USART2 to transmit at 115200 Baud */
void USART2_init(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <USART2_init+0x7c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <USART2_init+0x7c>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <USART2_init+0x7c>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <USART2_init+0x7c>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2, PA3 for USART2 TX, RX */
    GPIOA->AFR[0] &= ~0xFF00;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <USART2_init+0x80>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <USART2_init+0x80>)
 80006be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006c2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x7700;   /* alt7 for USART2 */
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <USART2_init+0x80>)
 80006c6:	6a1b      	ldr	r3, [r3, #32]
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <USART2_init+0x80>)
 80006ca:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80006ce:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  &= ~0x00F0;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <USART2_init+0x80>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <USART2_init+0x80>)
 80006d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006da:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x00A0;   /* enable alt. function for PA2, PA3 */
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <USART2_init+0x80>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <USART2_init+0x80>)
 80006e2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006e6:	6013      	str	r3, [r2, #0]

    USART2->BRR = 0x008B;       /* 115200 baud @ 16 MHz */
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <USART2_init+0x84>)
 80006ea:	228b      	movs	r2, #139	; 0x8b
 80006ec:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x000C;       /* enable Tx, Rx, 8-bit data */
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <USART2_init+0x84>)
 80006f0:	220c      	movs	r2, #12
 80006f2:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <USART2_init+0x84>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <USART2_init+0x84>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
    USART2->CR1 |= 0x2000;      /* enable USART2 */
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <USART2_init+0x84>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <USART2_init+0x84>)
 8000706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40004400 	.word	0x40004400

08000724 <USART2_write>:

/* Write a character to USART2 */
void USART2_write (int ch) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 800072c:	bf00      	nop
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <USART2_write+0x2c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <USART2_write+0xa>
    USART2->DR = (ch & 0xFF);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <USART2_write+0x2c>)
 800073e:	b2db      	uxtb	r3, r3
 8000740:	6053      	str	r3, [r2, #4]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40004400 	.word	0x40004400

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f878 	bl	8000894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f000 f870 	bl	80008bc <__errno>
 80007dc:	4602      	mov	r2, r0
 80007de:	230c      	movs	r3, #12
 80007e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20020000 	.word	0x20020000
 8000808:	00000400 	.word	0x00000400
 800080c:	2000008c 	.word	0x2000008c
 8000810:	200000a0 	.word	0x200000a0

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <SystemInit+0x28>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <SystemInit+0x28>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <SystemInit+0x28>)
 800082a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800082e:	609a      	str	r2, [r3, #8]
#endif
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000846:	e003      	b.n	8000850 <LoopCopyDataInit>

08000848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800084a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800084c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800084e:	3104      	adds	r1, #4

08000850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000858:	d3f6      	bcc.n	8000848 <CopyDataInit>
  ldr  r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800085c:	e002      	b.n	8000864 <LoopFillZerobss>

0800085e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800085e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000860:	f842 3b04 	str.w	r3, [r2], #4

08000864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000868:	d3f9      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800086a:	f7ff ffd3 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f000 f82b 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000872:	f7ff fd5b 	bl	800032c <main>
  bx  lr    
 8000876:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000878:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800087c:	08001174 	.word	0x08001174
  ldr  r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000884:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000888:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800088c:	200000a0 	.word	0x200000a0

08000890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC_IRQHandler>
	...

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000098 	.word	0x20000098

080008bc <__errno>:
 80008bc:	4b01      	ldr	r3, [pc, #4]	; (80008c4 <__errno+0x8>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000004 	.word	0x20000004

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4e0d      	ldr	r6, [pc, #52]	; (8000900 <__libc_init_array+0x38>)
 80008cc:	4c0d      	ldr	r4, [pc, #52]	; (8000904 <__libc_init_array+0x3c>)
 80008ce:	1ba4      	subs	r4, r4, r6
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	2500      	movs	r5, #0
 80008d4:	42a5      	cmp	r5, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4e0b      	ldr	r6, [pc, #44]	; (8000908 <__libc_init_array+0x40>)
 80008da:	4c0c      	ldr	r4, [pc, #48]	; (800090c <__libc_init_array+0x44>)
 80008dc:	f000 fc1e 	bl	800111c <_init>
 80008e0:	1ba4      	subs	r4, r4, r6
 80008e2:	10a4      	asrs	r4, r4, #2
 80008e4:	2500      	movs	r5, #0
 80008e6:	42a5      	cmp	r5, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008f0:	4798      	blx	r3
 80008f2:	3501      	adds	r5, #1
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008fa:	4798      	blx	r3
 80008fc:	3501      	adds	r5, #1
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	0800116c 	.word	0x0800116c
 8000904:	0800116c 	.word	0x0800116c
 8000908:	0800116c 	.word	0x0800116c
 800090c:	08001170 	.word	0x08001170

08000910 <siprintf>:
 8000910:	b40e      	push	{r1, r2, r3}
 8000912:	b500      	push	{lr}
 8000914:	b09c      	sub	sp, #112	; 0x70
 8000916:	ab1d      	add	r3, sp, #116	; 0x74
 8000918:	9002      	str	r0, [sp, #8]
 800091a:	9006      	str	r0, [sp, #24]
 800091c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <siprintf+0x38>)
 8000922:	9107      	str	r1, [sp, #28]
 8000924:	9104      	str	r1, [sp, #16]
 8000926:	4909      	ldr	r1, [pc, #36]	; (800094c <siprintf+0x3c>)
 8000928:	f853 2b04 	ldr.w	r2, [r3], #4
 800092c:	9105      	str	r1, [sp, #20]
 800092e:	6800      	ldr	r0, [r0, #0]
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	a902      	add	r1, sp, #8
 8000934:	f000 f866 	bl	8000a04 <_svfiprintf_r>
 8000938:	9b02      	ldr	r3, [sp, #8]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	b01c      	add	sp, #112	; 0x70
 8000940:	f85d eb04 	ldr.w	lr, [sp], #4
 8000944:	b003      	add	sp, #12
 8000946:	4770      	bx	lr
 8000948:	20000004 	.word	0x20000004
 800094c:	ffff0208 	.word	0xffff0208

08000950 <__ssputs_r>:
 8000950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000954:	688e      	ldr	r6, [r1, #8]
 8000956:	429e      	cmp	r6, r3
 8000958:	4682      	mov	sl, r0
 800095a:	460c      	mov	r4, r1
 800095c:	4690      	mov	r8, r2
 800095e:	4699      	mov	r9, r3
 8000960:	d837      	bhi.n	80009d2 <__ssputs_r+0x82>
 8000962:	898a      	ldrh	r2, [r1, #12]
 8000964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000968:	d031      	beq.n	80009ce <__ssputs_r+0x7e>
 800096a:	6825      	ldr	r5, [r4, #0]
 800096c:	6909      	ldr	r1, [r1, #16]
 800096e:	1a6f      	subs	r7, r5, r1
 8000970:	6965      	ldr	r5, [r4, #20]
 8000972:	2302      	movs	r3, #2
 8000974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000978:	fb95 f5f3 	sdiv	r5, r5, r3
 800097c:	f109 0301 	add.w	r3, r9, #1
 8000980:	443b      	add	r3, r7
 8000982:	429d      	cmp	r5, r3
 8000984:	bf38      	it	cc
 8000986:	461d      	movcc	r5, r3
 8000988:	0553      	lsls	r3, r2, #21
 800098a:	d530      	bpl.n	80009ee <__ssputs_r+0x9e>
 800098c:	4629      	mov	r1, r5
 800098e:	f000 fb2b 	bl	8000fe8 <_malloc_r>
 8000992:	4606      	mov	r6, r0
 8000994:	b950      	cbnz	r0, 80009ac <__ssputs_r+0x5c>
 8000996:	230c      	movs	r3, #12
 8000998:	f8ca 3000 	str.w	r3, [sl]
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	81a3      	strh	r3, [r4, #12]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ac:	463a      	mov	r2, r7
 80009ae:	6921      	ldr	r1, [r4, #16]
 80009b0:	f000 faa8 	bl	8000f04 <memcpy>
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009be:	81a3      	strh	r3, [r4, #12]
 80009c0:	6126      	str	r6, [r4, #16]
 80009c2:	6165      	str	r5, [r4, #20]
 80009c4:	443e      	add	r6, r7
 80009c6:	1bed      	subs	r5, r5, r7
 80009c8:	6026      	str	r6, [r4, #0]
 80009ca:	60a5      	str	r5, [r4, #8]
 80009cc:	464e      	mov	r6, r9
 80009ce:	454e      	cmp	r6, r9
 80009d0:	d900      	bls.n	80009d4 <__ssputs_r+0x84>
 80009d2:	464e      	mov	r6, r9
 80009d4:	4632      	mov	r2, r6
 80009d6:	4641      	mov	r1, r8
 80009d8:	6820      	ldr	r0, [r4, #0]
 80009da:	f000 fa9e 	bl	8000f1a <memmove>
 80009de:	68a3      	ldr	r3, [r4, #8]
 80009e0:	1b9b      	subs	r3, r3, r6
 80009e2:	60a3      	str	r3, [r4, #8]
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	441e      	add	r6, r3
 80009e8:	6026      	str	r6, [r4, #0]
 80009ea:	2000      	movs	r0, #0
 80009ec:	e7dc      	b.n	80009a8 <__ssputs_r+0x58>
 80009ee:	462a      	mov	r2, r5
 80009f0:	f000 fb54 	bl	800109c <_realloc_r>
 80009f4:	4606      	mov	r6, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d1e2      	bne.n	80009c0 <__ssputs_r+0x70>
 80009fa:	6921      	ldr	r1, [r4, #16]
 80009fc:	4650      	mov	r0, sl
 80009fe:	f000 faa5 	bl	8000f4c <_free_r>
 8000a02:	e7c8      	b.n	8000996 <__ssputs_r+0x46>

08000a04 <_svfiprintf_r>:
 8000a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a08:	461d      	mov	r5, r3
 8000a0a:	898b      	ldrh	r3, [r1, #12]
 8000a0c:	061f      	lsls	r7, r3, #24
 8000a0e:	b09d      	sub	sp, #116	; 0x74
 8000a10:	4680      	mov	r8, r0
 8000a12:	460c      	mov	r4, r1
 8000a14:	4616      	mov	r6, r2
 8000a16:	d50f      	bpl.n	8000a38 <_svfiprintf_r+0x34>
 8000a18:	690b      	ldr	r3, [r1, #16]
 8000a1a:	b96b      	cbnz	r3, 8000a38 <_svfiprintf_r+0x34>
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	f000 fae3 	bl	8000fe8 <_malloc_r>
 8000a22:	6020      	str	r0, [r4, #0]
 8000a24:	6120      	str	r0, [r4, #16]
 8000a26:	b928      	cbnz	r0, 8000a34 <_svfiprintf_r+0x30>
 8000a28:	230c      	movs	r3, #12
 8000a2a:	f8c8 3000 	str.w	r3, [r8]
 8000a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a32:	e0c8      	b.n	8000bc6 <_svfiprintf_r+0x1c2>
 8000a34:	2340      	movs	r3, #64	; 0x40
 8000a36:	6163      	str	r3, [r4, #20]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a42:	2330      	movs	r3, #48	; 0x30
 8000a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a48:	9503      	str	r5, [sp, #12]
 8000a4a:	f04f 0b01 	mov.w	fp, #1
 8000a4e:	4637      	mov	r7, r6
 8000a50:	463d      	mov	r5, r7
 8000a52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000a56:	b10b      	cbz	r3, 8000a5c <_svfiprintf_r+0x58>
 8000a58:	2b25      	cmp	r3, #37	; 0x25
 8000a5a:	d13e      	bne.n	8000ada <_svfiprintf_r+0xd6>
 8000a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8000a60:	d00b      	beq.n	8000a7a <_svfiprintf_r+0x76>
 8000a62:	4653      	mov	r3, sl
 8000a64:	4632      	mov	r2, r6
 8000a66:	4621      	mov	r1, r4
 8000a68:	4640      	mov	r0, r8
 8000a6a:	f7ff ff71 	bl	8000950 <__ssputs_r>
 8000a6e:	3001      	adds	r0, #1
 8000a70:	f000 80a4 	beq.w	8000bbc <_svfiprintf_r+0x1b8>
 8000a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a76:	4453      	add	r3, sl
 8000a78:	9309      	str	r3, [sp, #36]	; 0x24
 8000a7a:	783b      	ldrb	r3, [r7, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 809d 	beq.w	8000bbc <_svfiprintf_r+0x1b8>
 8000a82:	2300      	movs	r3, #0
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a8c:	9304      	str	r3, [sp, #16]
 8000a8e:	9307      	str	r3, [sp, #28]
 8000a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a94:	931a      	str	r3, [sp, #104]	; 0x68
 8000a96:	462f      	mov	r7, r5
 8000a98:	2205      	movs	r2, #5
 8000a9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000a9e:	4850      	ldr	r0, [pc, #320]	; (8000be0 <_svfiprintf_r+0x1dc>)
 8000aa0:	f7ff fb9e 	bl	80001e0 <memchr>
 8000aa4:	9b04      	ldr	r3, [sp, #16]
 8000aa6:	b9d0      	cbnz	r0, 8000ade <_svfiprintf_r+0xda>
 8000aa8:	06d9      	lsls	r1, r3, #27
 8000aaa:	bf44      	itt	mi
 8000aac:	2220      	movmi	r2, #32
 8000aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ab2:	071a      	lsls	r2, r3, #28
 8000ab4:	bf44      	itt	mi
 8000ab6:	222b      	movmi	r2, #43	; 0x2b
 8000ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000abc:	782a      	ldrb	r2, [r5, #0]
 8000abe:	2a2a      	cmp	r2, #42	; 0x2a
 8000ac0:	d015      	beq.n	8000aee <_svfiprintf_r+0xea>
 8000ac2:	9a07      	ldr	r2, [sp, #28]
 8000ac4:	462f      	mov	r7, r5
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	250a      	movs	r5, #10
 8000aca:	4639      	mov	r1, r7
 8000acc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ad0:	3b30      	subs	r3, #48	; 0x30
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	d94d      	bls.n	8000b72 <_svfiprintf_r+0x16e>
 8000ad6:	b1b8      	cbz	r0, 8000b08 <_svfiprintf_r+0x104>
 8000ad8:	e00f      	b.n	8000afa <_svfiprintf_r+0xf6>
 8000ada:	462f      	mov	r7, r5
 8000adc:	e7b8      	b.n	8000a50 <_svfiprintf_r+0x4c>
 8000ade:	4a40      	ldr	r2, [pc, #256]	; (8000be0 <_svfiprintf_r+0x1dc>)
 8000ae0:	1a80      	subs	r0, r0, r2
 8000ae2:	fa0b f000 	lsl.w	r0, fp, r0
 8000ae6:	4318      	orrs	r0, r3
 8000ae8:	9004      	str	r0, [sp, #16]
 8000aea:	463d      	mov	r5, r7
 8000aec:	e7d3      	b.n	8000a96 <_svfiprintf_r+0x92>
 8000aee:	9a03      	ldr	r2, [sp, #12]
 8000af0:	1d11      	adds	r1, r2, #4
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	9103      	str	r1, [sp, #12]
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	db01      	blt.n	8000afe <_svfiprintf_r+0xfa>
 8000afa:	9207      	str	r2, [sp, #28]
 8000afc:	e004      	b.n	8000b08 <_svfiprintf_r+0x104>
 8000afe:	4252      	negs	r2, r2
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	9207      	str	r2, [sp, #28]
 8000b06:	9304      	str	r3, [sp, #16]
 8000b08:	783b      	ldrb	r3, [r7, #0]
 8000b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b0c:	d10c      	bne.n	8000b28 <_svfiprintf_r+0x124>
 8000b0e:	787b      	ldrb	r3, [r7, #1]
 8000b10:	2b2a      	cmp	r3, #42	; 0x2a
 8000b12:	d133      	bne.n	8000b7c <_svfiprintf_r+0x178>
 8000b14:	9b03      	ldr	r3, [sp, #12]
 8000b16:	1d1a      	adds	r2, r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	9203      	str	r2, [sp, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bfb8      	it	lt
 8000b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b24:	3702      	adds	r7, #2
 8000b26:	9305      	str	r3, [sp, #20]
 8000b28:	4d2e      	ldr	r5, [pc, #184]	; (8000be4 <_svfiprintf_r+0x1e0>)
 8000b2a:	7839      	ldrb	r1, [r7, #0]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff fb56 	bl	80001e0 <memchr>
 8000b34:	b138      	cbz	r0, 8000b46 <_svfiprintf_r+0x142>
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8000b3e:	9b04      	ldr	r3, [sp, #16]
 8000b40:	4303      	orrs	r3, r0
 8000b42:	3701      	adds	r7, #1
 8000b44:	9304      	str	r3, [sp, #16]
 8000b46:	7839      	ldrb	r1, [r7, #0]
 8000b48:	4827      	ldr	r0, [pc, #156]	; (8000be8 <_svfiprintf_r+0x1e4>)
 8000b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b4e:	2206      	movs	r2, #6
 8000b50:	1c7e      	adds	r6, r7, #1
 8000b52:	f7ff fb45 	bl	80001e0 <memchr>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d038      	beq.n	8000bcc <_svfiprintf_r+0x1c8>
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <_svfiprintf_r+0x1e8>)
 8000b5c:	bb13      	cbnz	r3, 8000ba4 <_svfiprintf_r+0x1a0>
 8000b5e:	9b03      	ldr	r3, [sp, #12]
 8000b60:	3307      	adds	r3, #7
 8000b62:	f023 0307 	bic.w	r3, r3, #7
 8000b66:	3308      	adds	r3, #8
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b6c:	444b      	add	r3, r9
 8000b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b70:	e76d      	b.n	8000a4e <_svfiprintf_r+0x4a>
 8000b72:	fb05 3202 	mla	r2, r5, r2, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	460f      	mov	r7, r1
 8000b7a:	e7a6      	b.n	8000aca <_svfiprintf_r+0xc6>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	3701      	adds	r7, #1
 8000b80:	9305      	str	r3, [sp, #20]
 8000b82:	4619      	mov	r1, r3
 8000b84:	250a      	movs	r5, #10
 8000b86:	4638      	mov	r0, r7
 8000b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b8c:	3a30      	subs	r2, #48	; 0x30
 8000b8e:	2a09      	cmp	r2, #9
 8000b90:	d903      	bls.n	8000b9a <_svfiprintf_r+0x196>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0c8      	beq.n	8000b28 <_svfiprintf_r+0x124>
 8000b96:	9105      	str	r1, [sp, #20]
 8000b98:	e7c6      	b.n	8000b28 <_svfiprintf_r+0x124>
 8000b9a:	fb05 2101 	mla	r1, r5, r1, r2
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	e7f0      	b.n	8000b86 <_svfiprintf_r+0x182>
 8000ba4:	ab03      	add	r3, sp, #12
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4622      	mov	r2, r4
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_svfiprintf_r+0x1ec>)
 8000bac:	a904      	add	r1, sp, #16
 8000bae:	4640      	mov	r0, r8
 8000bb0:	f3af 8000 	nop.w
 8000bb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000bb8:	4681      	mov	r9, r0
 8000bba:	d1d6      	bne.n	8000b6a <_svfiprintf_r+0x166>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	065b      	lsls	r3, r3, #25
 8000bc0:	f53f af35 	bmi.w	8000a2e <_svfiprintf_r+0x2a>
 8000bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000bc6:	b01d      	add	sp, #116	; 0x74
 8000bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bcc:	ab03      	add	r3, sp, #12
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_svfiprintf_r+0x1ec>)
 8000bd4:	a904      	add	r1, sp, #16
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	f000 f882 	bl	8000ce0 <_printf_i>
 8000bdc:	e7ea      	b.n	8000bb4 <_svfiprintf_r+0x1b0>
 8000bde:	bf00      	nop
 8000be0:	08001139 	.word	0x08001139
 8000be4:	0800113f 	.word	0x0800113f
 8000be8:	08001143 	.word	0x08001143
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	08000951 	.word	0x08000951

08000bf4 <_printf_common>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	4691      	mov	r9, r2
 8000bfa:	461f      	mov	r7, r3
 8000bfc:	688a      	ldr	r2, [r1, #8]
 8000bfe:	690b      	ldr	r3, [r1, #16]
 8000c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	bfb8      	it	lt
 8000c08:	4613      	movlt	r3, r2
 8000c0a:	f8c9 3000 	str.w	r3, [r9]
 8000c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c12:	4606      	mov	r6, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	b112      	cbz	r2, 8000c1e <_printf_common+0x2a>
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8c9 3000 	str.w	r3, [r9]
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	0699      	lsls	r1, r3, #26
 8000c22:	bf42      	ittt	mi
 8000c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000c28:	3302      	addmi	r3, #2
 8000c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8000c2e:	6825      	ldr	r5, [r4, #0]
 8000c30:	f015 0506 	ands.w	r5, r5, #6
 8000c34:	d107      	bne.n	8000c46 <_printf_common+0x52>
 8000c36:	f104 0a19 	add.w	sl, r4, #25
 8000c3a:	68e3      	ldr	r3, [r4, #12]
 8000c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8000c40:	1a9b      	subs	r3, r3, r2
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	dc28      	bgt.n	8000c98 <_printf_common+0xa4>
 8000c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	3300      	adds	r3, #0
 8000c4e:	bf18      	it	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	0692      	lsls	r2, r2, #26
 8000c54:	d42d      	bmi.n	8000cb2 <_printf_common+0xbe>
 8000c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c5a:	4639      	mov	r1, r7
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	47c0      	blx	r8
 8000c60:	3001      	adds	r0, #1
 8000c62:	d020      	beq.n	8000ca6 <_printf_common+0xb2>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	68e5      	ldr	r5, [r4, #12]
 8000c68:	f8d9 2000 	ldr.w	r2, [r9]
 8000c6c:	f003 0306 	and.w	r3, r3, #6
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	bf08      	it	eq
 8000c74:	1aad      	subeq	r5, r5, r2
 8000c76:	68a3      	ldr	r3, [r4, #8]
 8000c78:	6922      	ldr	r2, [r4, #16]
 8000c7a:	bf0c      	ite	eq
 8000c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c80:	2500      	movne	r5, #0
 8000c82:	4293      	cmp	r3, r2
 8000c84:	bfc4      	itt	gt
 8000c86:	1a9b      	subgt	r3, r3, r2
 8000c88:	18ed      	addgt	r5, r5, r3
 8000c8a:	f04f 0900 	mov.w	r9, #0
 8000c8e:	341a      	adds	r4, #26
 8000c90:	454d      	cmp	r5, r9
 8000c92:	d11a      	bne.n	8000cca <_printf_common+0xd6>
 8000c94:	2000      	movs	r0, #0
 8000c96:	e008      	b.n	8000caa <_printf_common+0xb6>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	47c0      	blx	r8
 8000ca2:	3001      	adds	r0, #1
 8000ca4:	d103      	bne.n	8000cae <_printf_common+0xba>
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7c3      	b.n	8000c3a <_printf_common+0x46>
 8000cb2:	18e1      	adds	r1, r4, r3
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	2030      	movs	r0, #48	; 0x30
 8000cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cbc:	4422      	add	r2, r4
 8000cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e7c5      	b.n	8000c56 <_printf_common+0x62>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4622      	mov	r2, r4
 8000cce:	4639      	mov	r1, r7
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	47c0      	blx	r8
 8000cd4:	3001      	adds	r0, #1
 8000cd6:	d0e6      	beq.n	8000ca6 <_printf_common+0xb2>
 8000cd8:	f109 0901 	add.w	r9, r9, #1
 8000cdc:	e7d8      	b.n	8000c90 <_printf_common+0x9c>
	...

08000ce0 <_printf_i>:
 8000ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000ce8:	460c      	mov	r4, r1
 8000cea:	7e09      	ldrb	r1, [r1, #24]
 8000cec:	b085      	sub	sp, #20
 8000cee:	296e      	cmp	r1, #110	; 0x6e
 8000cf0:	4617      	mov	r7, r2
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000cf8:	f000 80b3 	beq.w	8000e62 <_printf_i+0x182>
 8000cfc:	d822      	bhi.n	8000d44 <_printf_i+0x64>
 8000cfe:	2963      	cmp	r1, #99	; 0x63
 8000d00:	d036      	beq.n	8000d70 <_printf_i+0x90>
 8000d02:	d80a      	bhi.n	8000d1a <_printf_i+0x3a>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	f000 80b9 	beq.w	8000e7c <_printf_i+0x19c>
 8000d0a:	2958      	cmp	r1, #88	; 0x58
 8000d0c:	f000 8083 	beq.w	8000e16 <_printf_i+0x136>
 8000d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000d18:	e032      	b.n	8000d80 <_printf_i+0xa0>
 8000d1a:	2964      	cmp	r1, #100	; 0x64
 8000d1c:	d001      	beq.n	8000d22 <_printf_i+0x42>
 8000d1e:	2969      	cmp	r1, #105	; 0x69
 8000d20:	d1f6      	bne.n	8000d10 <_printf_i+0x30>
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	0605      	lsls	r5, r0, #24
 8000d28:	f103 0104 	add.w	r1, r3, #4
 8000d2c:	d52a      	bpl.n	8000d84 <_printf_i+0xa4>
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6011      	str	r1, [r2, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da03      	bge.n	8000d3e <_printf_i+0x5e>
 8000d36:	222d      	movs	r2, #45	; 0x2d
 8000d38:	425b      	negs	r3, r3
 8000d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000d3e:	486f      	ldr	r0, [pc, #444]	; (8000efc <_printf_i+0x21c>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	e039      	b.n	8000db8 <_printf_i+0xd8>
 8000d44:	2973      	cmp	r1, #115	; 0x73
 8000d46:	f000 809d 	beq.w	8000e84 <_printf_i+0x1a4>
 8000d4a:	d808      	bhi.n	8000d5e <_printf_i+0x7e>
 8000d4c:	296f      	cmp	r1, #111	; 0x6f
 8000d4e:	d020      	beq.n	8000d92 <_printf_i+0xb2>
 8000d50:	2970      	cmp	r1, #112	; 0x70
 8000d52:	d1dd      	bne.n	8000d10 <_printf_i+0x30>
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6023      	str	r3, [r4, #0]
 8000d5c:	e003      	b.n	8000d66 <_printf_i+0x86>
 8000d5e:	2975      	cmp	r1, #117	; 0x75
 8000d60:	d017      	beq.n	8000d92 <_printf_i+0xb2>
 8000d62:	2978      	cmp	r1, #120	; 0x78
 8000d64:	d1d4      	bne.n	8000d10 <_printf_i+0x30>
 8000d66:	2378      	movs	r3, #120	; 0x78
 8000d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000d6c:	4864      	ldr	r0, [pc, #400]	; (8000f00 <_printf_i+0x220>)
 8000d6e:	e055      	b.n	8000e1c <_printf_i+0x13c>
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	1d19      	adds	r1, r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6011      	str	r1, [r2, #0]
 8000d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d80:	2301      	movs	r3, #1
 8000d82:	e08c      	b.n	8000e9e <_printf_i+0x1be>
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6011      	str	r1, [r2, #0]
 8000d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d8c:	bf18      	it	ne
 8000d8e:	b21b      	sxthne	r3, r3
 8000d90:	e7cf      	b.n	8000d32 <_printf_i+0x52>
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	6825      	ldr	r5, [r4, #0]
 8000d96:	1d18      	adds	r0, r3, #4
 8000d98:	6010      	str	r0, [r2, #0]
 8000d9a:	0628      	lsls	r0, r5, #24
 8000d9c:	d501      	bpl.n	8000da2 <_printf_i+0xc2>
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	e002      	b.n	8000da8 <_printf_i+0xc8>
 8000da2:	0668      	lsls	r0, r5, #25
 8000da4:	d5fb      	bpl.n	8000d9e <_printf_i+0xbe>
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4854      	ldr	r0, [pc, #336]	; (8000efc <_printf_i+0x21c>)
 8000daa:	296f      	cmp	r1, #111	; 0x6f
 8000dac:	bf14      	ite	ne
 8000dae:	220a      	movne	r2, #10
 8000db0:	2208      	moveq	r2, #8
 8000db2:	2100      	movs	r1, #0
 8000db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000db8:	6865      	ldr	r5, [r4, #4]
 8000dba:	60a5      	str	r5, [r4, #8]
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	f2c0 8095 	blt.w	8000eec <_printf_i+0x20c>
 8000dc2:	6821      	ldr	r1, [r4, #0]
 8000dc4:	f021 0104 	bic.w	r1, r1, #4
 8000dc8:	6021      	str	r1, [r4, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d13d      	bne.n	8000e4a <_printf_i+0x16a>
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	f040 808e 	bne.w	8000ef0 <_printf_i+0x210>
 8000dd4:	4665      	mov	r5, ip
 8000dd6:	2a08      	cmp	r2, #8
 8000dd8:	d10b      	bne.n	8000df2 <_printf_i+0x112>
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	d508      	bpl.n	8000df2 <_printf_i+0x112>
 8000de0:	6923      	ldr	r3, [r4, #16]
 8000de2:	6862      	ldr	r2, [r4, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bfde      	ittt	le
 8000de8:	2330      	movle	r3, #48	; 0x30
 8000dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000df2:	ebac 0305 	sub.w	r3, ip, r5
 8000df6:	6123      	str	r3, [r4, #16]
 8000df8:	f8cd 8000 	str.w	r8, [sp]
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	aa03      	add	r2, sp, #12
 8000e00:	4621      	mov	r1, r4
 8000e02:	4630      	mov	r0, r6
 8000e04:	f7ff fef6 	bl	8000bf4 <_printf_common>
 8000e08:	3001      	adds	r0, #1
 8000e0a:	d14d      	bne.n	8000ea8 <_printf_i+0x1c8>
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	b005      	add	sp, #20
 8000e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e16:	4839      	ldr	r0, [pc, #228]	; (8000efc <_printf_i+0x21c>)
 8000e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000e1c:	6813      	ldr	r3, [r2, #0]
 8000e1e:	6821      	ldr	r1, [r4, #0]
 8000e20:	1d1d      	adds	r5, r3, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6015      	str	r5, [r2, #0]
 8000e26:	060a      	lsls	r2, r1, #24
 8000e28:	d50b      	bpl.n	8000e42 <_printf_i+0x162>
 8000e2a:	07ca      	lsls	r2, r1, #31
 8000e2c:	bf44      	itt	mi
 8000e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8000e32:	6021      	strmi	r1, [r4, #0]
 8000e34:	b91b      	cbnz	r3, 8000e3e <_printf_i+0x15e>
 8000e36:	6822      	ldr	r2, [r4, #0]
 8000e38:	f022 0220 	bic.w	r2, r2, #32
 8000e3c:	6022      	str	r2, [r4, #0]
 8000e3e:	2210      	movs	r2, #16
 8000e40:	e7b7      	b.n	8000db2 <_printf_i+0xd2>
 8000e42:	064d      	lsls	r5, r1, #25
 8000e44:	bf48      	it	mi
 8000e46:	b29b      	uxthmi	r3, r3
 8000e48:	e7ef      	b.n	8000e2a <_printf_i+0x14a>
 8000e4a:	4665      	mov	r5, ip
 8000e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e50:	fb02 3311 	mls	r3, r2, r1, r3
 8000e54:	5cc3      	ldrb	r3, [r0, r3]
 8000e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	d1f5      	bne.n	8000e4c <_printf_i+0x16c>
 8000e60:	e7b9      	b.n	8000dd6 <_printf_i+0xf6>
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	6825      	ldr	r5, [r4, #0]
 8000e66:	6961      	ldr	r1, [r4, #20]
 8000e68:	1d18      	adds	r0, r3, #4
 8000e6a:	6010      	str	r0, [r2, #0]
 8000e6c:	0628      	lsls	r0, r5, #24
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	d501      	bpl.n	8000e76 <_printf_i+0x196>
 8000e72:	6019      	str	r1, [r3, #0]
 8000e74:	e002      	b.n	8000e7c <_printf_i+0x19c>
 8000e76:	066a      	lsls	r2, r5, #25
 8000e78:	d5fb      	bpl.n	8000e72 <_printf_i+0x192>
 8000e7a:	8019      	strh	r1, [r3, #0]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	6123      	str	r3, [r4, #16]
 8000e80:	4665      	mov	r5, ip
 8000e82:	e7b9      	b.n	8000df8 <_printf_i+0x118>
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	1d19      	adds	r1, r3, #4
 8000e88:	6011      	str	r1, [r2, #0]
 8000e8a:	681d      	ldr	r5, [r3, #0]
 8000e8c:	6862      	ldr	r2, [r4, #4]
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4628      	mov	r0, r5
 8000e92:	f7ff f9a5 	bl	80001e0 <memchr>
 8000e96:	b108      	cbz	r0, 8000e9c <_printf_i+0x1bc>
 8000e98:	1b40      	subs	r0, r0, r5
 8000e9a:	6060      	str	r0, [r4, #4]
 8000e9c:	6863      	ldr	r3, [r4, #4]
 8000e9e:	6123      	str	r3, [r4, #16]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ea6:	e7a7      	b.n	8000df8 <_printf_i+0x118>
 8000ea8:	6923      	ldr	r3, [r4, #16]
 8000eaa:	462a      	mov	r2, r5
 8000eac:	4639      	mov	r1, r7
 8000eae:	4630      	mov	r0, r6
 8000eb0:	47c0      	blx	r8
 8000eb2:	3001      	adds	r0, #1
 8000eb4:	d0aa      	beq.n	8000e0c <_printf_i+0x12c>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	079b      	lsls	r3, r3, #30
 8000eba:	d413      	bmi.n	8000ee4 <_printf_i+0x204>
 8000ebc:	68e0      	ldr	r0, [r4, #12]
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	bfb8      	it	lt
 8000ec4:	4618      	movlt	r0, r3
 8000ec6:	e7a3      	b.n	8000e10 <_printf_i+0x130>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	464a      	mov	r2, r9
 8000ecc:	4639      	mov	r1, r7
 8000ece:	4630      	mov	r0, r6
 8000ed0:	47c0      	blx	r8
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d09a      	beq.n	8000e0c <_printf_i+0x12c>
 8000ed6:	3501      	adds	r5, #1
 8000ed8:	68e3      	ldr	r3, [r4, #12]
 8000eda:	9a03      	ldr	r2, [sp, #12]
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	42ab      	cmp	r3, r5
 8000ee0:	dcf2      	bgt.n	8000ec8 <_printf_i+0x1e8>
 8000ee2:	e7eb      	b.n	8000ebc <_printf_i+0x1dc>
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	f104 0919 	add.w	r9, r4, #25
 8000eea:	e7f5      	b.n	8000ed8 <_printf_i+0x1f8>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ac      	bne.n	8000e4a <_printf_i+0x16a>
 8000ef0:	7803      	ldrb	r3, [r0, #0]
 8000ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000efa:	e76c      	b.n	8000dd6 <_printf_i+0xf6>
 8000efc:	0800114a 	.word	0x0800114a
 8000f00:	0800115b 	.word	0x0800115b

08000f04 <memcpy>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	1e43      	subs	r3, r0, #1
 8000f08:	440a      	add	r2, r1
 8000f0a:	4291      	cmp	r1, r2
 8000f0c:	d100      	bne.n	8000f10 <memcpy+0xc>
 8000f0e:	bd10      	pop	{r4, pc}
 8000f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f18:	e7f7      	b.n	8000f0a <memcpy+0x6>

08000f1a <memmove>:
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	eb01 0302 	add.w	r3, r1, r2
 8000f22:	d807      	bhi.n	8000f34 <memmove+0x1a>
 8000f24:	1e42      	subs	r2, r0, #1
 8000f26:	4299      	cmp	r1, r3
 8000f28:	d00a      	beq.n	8000f40 <memmove+0x26>
 8000f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8000f32:	e7f8      	b.n	8000f26 <memmove+0xc>
 8000f34:	4283      	cmp	r3, r0
 8000f36:	d9f5      	bls.n	8000f24 <memmove+0xa>
 8000f38:	1881      	adds	r1, r0, r2
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	42d3      	cmn	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <memmove+0x28>
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8000f4a:	e7f7      	b.n	8000f3c <memmove+0x22>

08000f4c <_free_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4605      	mov	r5, r0
 8000f50:	2900      	cmp	r1, #0
 8000f52:	d045      	beq.n	8000fe0 <_free_r+0x94>
 8000f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f58:	1f0c      	subs	r4, r1, #4
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bfb8      	it	lt
 8000f5e:	18e4      	addlt	r4, r4, r3
 8000f60:	f000 f8d2 	bl	8001108 <__malloc_lock>
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <_free_r+0x98>)
 8000f66:	6813      	ldr	r3, [r2, #0]
 8000f68:	4610      	mov	r0, r2
 8000f6a:	b933      	cbnz	r3, 8000f7a <_free_r+0x2e>
 8000f6c:	6063      	str	r3, [r4, #4]
 8000f6e:	6014      	str	r4, [r2, #0]
 8000f70:	4628      	mov	r0, r5
 8000f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f76:	f000 b8c8 	b.w	800110a <__malloc_unlock>
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	d90c      	bls.n	8000f98 <_free_r+0x4c>
 8000f7e:	6821      	ldr	r1, [r4, #0]
 8000f80:	1862      	adds	r2, r4, r1
 8000f82:	4293      	cmp	r3, r2
 8000f84:	bf04      	itt	eq
 8000f86:	681a      	ldreq	r2, [r3, #0]
 8000f88:	685b      	ldreq	r3, [r3, #4]
 8000f8a:	6063      	str	r3, [r4, #4]
 8000f8c:	bf04      	itt	eq
 8000f8e:	1852      	addeq	r2, r2, r1
 8000f90:	6022      	streq	r2, [r4, #0]
 8000f92:	6004      	str	r4, [r0, #0]
 8000f94:	e7ec      	b.n	8000f70 <_free_r+0x24>
 8000f96:	4613      	mov	r3, r2
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	b10a      	cbz	r2, 8000fa0 <_free_r+0x54>
 8000f9c:	42a2      	cmp	r2, r4
 8000f9e:	d9fa      	bls.n	8000f96 <_free_r+0x4a>
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	1858      	adds	r0, r3, r1
 8000fa4:	42a0      	cmp	r0, r4
 8000fa6:	d10b      	bne.n	8000fc0 <_free_r+0x74>
 8000fa8:	6820      	ldr	r0, [r4, #0]
 8000faa:	4401      	add	r1, r0
 8000fac:	1858      	adds	r0, r3, r1
 8000fae:	4282      	cmp	r2, r0
 8000fb0:	6019      	str	r1, [r3, #0]
 8000fb2:	d1dd      	bne.n	8000f70 <_free_r+0x24>
 8000fb4:	6810      	ldr	r0, [r2, #0]
 8000fb6:	6852      	ldr	r2, [r2, #4]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	4401      	add	r1, r0
 8000fbc:	6019      	str	r1, [r3, #0]
 8000fbe:	e7d7      	b.n	8000f70 <_free_r+0x24>
 8000fc0:	d902      	bls.n	8000fc8 <_free_r+0x7c>
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	e7d3      	b.n	8000f70 <_free_r+0x24>
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	1821      	adds	r1, r4, r0
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	bf04      	itt	eq
 8000fd0:	6811      	ldreq	r1, [r2, #0]
 8000fd2:	6852      	ldreq	r2, [r2, #4]
 8000fd4:	6062      	str	r2, [r4, #4]
 8000fd6:	bf04      	itt	eq
 8000fd8:	1809      	addeq	r1, r1, r0
 8000fda:	6021      	streq	r1, [r4, #0]
 8000fdc:	605c      	str	r4, [r3, #4]
 8000fde:	e7c7      	b.n	8000f70 <_free_r+0x24>
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000090 	.word	0x20000090

08000fe8 <_malloc_r>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	1ccd      	adds	r5, r1, #3
 8000fec:	f025 0503 	bic.w	r5, r5, #3
 8000ff0:	3508      	adds	r5, #8
 8000ff2:	2d0c      	cmp	r5, #12
 8000ff4:	bf38      	it	cc
 8000ff6:	250c      	movcc	r5, #12
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	4606      	mov	r6, r0
 8000ffc:	db01      	blt.n	8001002 <_malloc_r+0x1a>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d903      	bls.n	800100a <_malloc_r+0x22>
 8001002:	230c      	movs	r3, #12
 8001004:	6033      	str	r3, [r6, #0]
 8001006:	2000      	movs	r0, #0
 8001008:	bd70      	pop	{r4, r5, r6, pc}
 800100a:	f000 f87d 	bl	8001108 <__malloc_lock>
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <_malloc_r+0xac>)
 8001010:	6814      	ldr	r4, [r2, #0]
 8001012:	4621      	mov	r1, r4
 8001014:	b991      	cbnz	r1, 800103c <_malloc_r+0x54>
 8001016:	4c20      	ldr	r4, [pc, #128]	; (8001098 <_malloc_r+0xb0>)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	b91b      	cbnz	r3, 8001024 <_malloc_r+0x3c>
 800101c:	4630      	mov	r0, r6
 800101e:	f000 f863 	bl	80010e8 <_sbrk_r>
 8001022:	6020      	str	r0, [r4, #0]
 8001024:	4629      	mov	r1, r5
 8001026:	4630      	mov	r0, r6
 8001028:	f000 f85e 	bl	80010e8 <_sbrk_r>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d124      	bne.n	800107a <_malloc_r+0x92>
 8001030:	230c      	movs	r3, #12
 8001032:	6033      	str	r3, [r6, #0]
 8001034:	4630      	mov	r0, r6
 8001036:	f000 f868 	bl	800110a <__malloc_unlock>
 800103a:	e7e4      	b.n	8001006 <_malloc_r+0x1e>
 800103c:	680b      	ldr	r3, [r1, #0]
 800103e:	1b5b      	subs	r3, r3, r5
 8001040:	d418      	bmi.n	8001074 <_malloc_r+0x8c>
 8001042:	2b0b      	cmp	r3, #11
 8001044:	d90f      	bls.n	8001066 <_malloc_r+0x7e>
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	50cd      	str	r5, [r1, r3]
 800104a:	18cc      	adds	r4, r1, r3
 800104c:	4630      	mov	r0, r6
 800104e:	f000 f85c 	bl	800110a <__malloc_unlock>
 8001052:	f104 000b 	add.w	r0, r4, #11
 8001056:	1d23      	adds	r3, r4, #4
 8001058:	f020 0007 	bic.w	r0, r0, #7
 800105c:	1ac3      	subs	r3, r0, r3
 800105e:	d0d3      	beq.n	8001008 <_malloc_r+0x20>
 8001060:	425a      	negs	r2, r3
 8001062:	50e2      	str	r2, [r4, r3]
 8001064:	e7d0      	b.n	8001008 <_malloc_r+0x20>
 8001066:	428c      	cmp	r4, r1
 8001068:	684b      	ldr	r3, [r1, #4]
 800106a:	bf16      	itet	ne
 800106c:	6063      	strne	r3, [r4, #4]
 800106e:	6013      	streq	r3, [r2, #0]
 8001070:	460c      	movne	r4, r1
 8001072:	e7eb      	b.n	800104c <_malloc_r+0x64>
 8001074:	460c      	mov	r4, r1
 8001076:	6849      	ldr	r1, [r1, #4]
 8001078:	e7cc      	b.n	8001014 <_malloc_r+0x2c>
 800107a:	1cc4      	adds	r4, r0, #3
 800107c:	f024 0403 	bic.w	r4, r4, #3
 8001080:	42a0      	cmp	r0, r4
 8001082:	d005      	beq.n	8001090 <_malloc_r+0xa8>
 8001084:	1a21      	subs	r1, r4, r0
 8001086:	4630      	mov	r0, r6
 8001088:	f000 f82e 	bl	80010e8 <_sbrk_r>
 800108c:	3001      	adds	r0, #1
 800108e:	d0cf      	beq.n	8001030 <_malloc_r+0x48>
 8001090:	6025      	str	r5, [r4, #0]
 8001092:	e7db      	b.n	800104c <_malloc_r+0x64>
 8001094:	20000090 	.word	0x20000090
 8001098:	20000094 	.word	0x20000094

0800109c <_realloc_r>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	4607      	mov	r7, r0
 80010a0:	4614      	mov	r4, r2
 80010a2:	460e      	mov	r6, r1
 80010a4:	b921      	cbnz	r1, 80010b0 <_realloc_r+0x14>
 80010a6:	4611      	mov	r1, r2
 80010a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80010ac:	f7ff bf9c 	b.w	8000fe8 <_malloc_r>
 80010b0:	b922      	cbnz	r2, 80010bc <_realloc_r+0x20>
 80010b2:	f7ff ff4b 	bl	8000f4c <_free_r>
 80010b6:	4625      	mov	r5, r4
 80010b8:	4628      	mov	r0, r5
 80010ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010bc:	f000 f826 	bl	800110c <_malloc_usable_size_r>
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d20f      	bcs.n	80010e4 <_realloc_r+0x48>
 80010c4:	4621      	mov	r1, r4
 80010c6:	4638      	mov	r0, r7
 80010c8:	f7ff ff8e 	bl	8000fe8 <_malloc_r>
 80010cc:	4605      	mov	r5, r0
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d0f2      	beq.n	80010b8 <_realloc_r+0x1c>
 80010d2:	4631      	mov	r1, r6
 80010d4:	4622      	mov	r2, r4
 80010d6:	f7ff ff15 	bl	8000f04 <memcpy>
 80010da:	4631      	mov	r1, r6
 80010dc:	4638      	mov	r0, r7
 80010de:	f7ff ff35 	bl	8000f4c <_free_r>
 80010e2:	e7e9      	b.n	80010b8 <_realloc_r+0x1c>
 80010e4:	4635      	mov	r5, r6
 80010e6:	e7e7      	b.n	80010b8 <_realloc_r+0x1c>

080010e8 <_sbrk_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4c06      	ldr	r4, [pc, #24]	; (8001104 <_sbrk_r+0x1c>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4605      	mov	r5, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	6023      	str	r3, [r4, #0]
 80010f4:	f7ff fb58 	bl	80007a8 <_sbrk>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_sbrk_r+0x1a>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_sbrk_r+0x1a>
 8001100:	602b      	str	r3, [r5, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	2000009c 	.word	0x2000009c

08001108 <__malloc_lock>:
 8001108:	4770      	bx	lr

0800110a <__malloc_unlock>:
 800110a:	4770      	bx	lr

0800110c <_malloc_usable_size_r>:
 800110c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001110:	1f18      	subs	r0, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	bfbc      	itt	lt
 8001116:	580b      	ldrlt	r3, [r1, r0]
 8001118:	18c0      	addlt	r0, r0, r3
 800111a:	4770      	bx	lr

0800111c <_init>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	bf00      	nop
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr

08001128 <_fini>:
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	bf00      	nop
 800112c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112e:	bc08      	pop	{r3}
 8001130:	469e      	mov	lr, r3
 8001132:	4770      	bx	lr
