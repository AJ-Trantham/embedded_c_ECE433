
tremolo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000139c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800153c  0800153c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001574  08001574  00020384  2**0
                  CONTENTS
  4 .ARM          00000000  08001574  08001574  00020384  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001574  08001574  00020384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001574  08001574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  0800157c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000384  08001900  00020384  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08001900  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b32  00000000  00000000  000203b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000745  00000000  00000000  00022ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00023630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000237f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a9e  00000000  00000000  00023968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e7d  00000000  00000000  00038406  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083ee6  00000000  00000000  0003a283  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008b4  00000000  00000000  000be1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000384 	.word	0x20000384
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001524 	.word	0x08001524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000388 	.word	0x20000388
 80001dc:	08001524 	.word	0x08001524

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <TIM2_IRQHandler>:
		} // sawtooth
};

// -------------------------------------------------ISRs--------------------------------------------------------------------

void TIM2_IRQHandler(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	TIM2->SR = 0;	// clears the interrupt flag UIF
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]

	update_rate();
 800031c:	f000 fa68 	bl	80007f0 <update_rate>
	update_depth();
 8000320:	f000 faa6 	bl	8000870 <update_depth>

	// reset interrupt
	control_sample_timer_config();
 8000324:	f000 f93c 	bl	80005a0 <control_sample_timer_config>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <SysTick_Handler>:

/** Controls the wave creation, this interrupt is based on rate as setup by update_rate()
 * Note: I had to comment out the stm32f4xx_it.c
 */
void SysTick_Handler(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0

	float wave_val = current_wave[wave_index][sample_index++];
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SysTick_Handler+0xb4>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <SysTick_Handler+0xb8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c59      	adds	r1, r3, #1
 800033c:	4829      	ldr	r0, [pc, #164]	; (80003e4 <SysTick_Handler+0xb8>)
 800033e:	6001      	str	r1, [r0, #0]
 8000340:	4929      	ldr	r1, [pc, #164]	; (80003e8 <SysTick_Handler+0xbc>)
 8000342:	2032      	movs	r0, #50	; 0x32
 8000344:	fb00 f202 	mul.w	r2, r0, r2
 8000348:	4413      	add	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	440b      	add	r3, r1
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	61fb      	str	r3, [r7, #28]

	// apply depth control to base wave value - TODO: could this be a critical section if a call to update depth occurs here
	int digital_attenuation_range = MINDEPTH - depth;
 8000352:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SysTick_Handler+0xc0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	61bb      	str	r3, [r7, #24]
	short scaled_wave_point = (digital_attenuation_range * wave_val) + depth;
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	ee07 3a90 	vmov	s15, r3
 8000364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000368:	edd7 7a07 	vldr	s15, [r7, #28]
 800036c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <SysTick_Handler+0xc0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	ee07 3a90 	vmov	s15, r3
 8000378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800037c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000384:	ee17 3a90 	vmov	r3, s15
 8000388:	82fb      	strh	r3, [r7, #22]
//	if (scaled_wave_point <= 20) {
//		scaled_wave_point = 20;
//	} else if (scaled_wave_point >= 1023) {
//		scaled_wave_point = 1022;
//	}
	DAC_write(scaled_wave_point);
 800038a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f9f4 	bl	800077c <DAC_write>

	char send[16];
	sprintf(send, "$%d;", scaled_wave_point);
 8000394:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4915      	ldr	r1, [pc, #84]	; (80003f0 <SysTick_Handler+0xc4>)
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fcbb 	bl	8000d18 <siprintf>
	myprint(send);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fab7 	bl	8000918 <myprint>

	if (sample_index % NUM_WAVEPOINTS_PER_CYCLE == 0) {
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <SysTick_Handler+0xb8>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SysTick_Handler+0xc8>)
 80003b0:	fb83 1302 	smull	r1, r3, r3, r2
 80003b4:	1119      	asrs	r1, r3, #4
 80003b6:	17d3      	asrs	r3, r2, #31
 80003b8:	1acb      	subs	r3, r1, r3
 80003ba:	2132      	movs	r1, #50	; 0x32
 80003bc:	fb01 f303 	mul.w	r3, r1, r3
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d102      	bne.n	80003cc <SysTick_Handler+0xa0>
		sample_index = 0;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <SysTick_Handler+0xb8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
	}

	set_sysTick_interrupt(wavepoint_time_space);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <SysTick_Handler+0xcc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f90f 	bl	80005f4 <set_sysTick_interrupt>
}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200003a8 	.word	0x200003a8
 80003e4:	200003ac 	.word	0x200003ac
 80003e8:	20000000 	.word	0x20000000
 80003ec:	200003a0 	.word	0x200003a0
 80003f0:	0800153c 	.word	0x0800153c
 80003f4:	51eb851f 	.word	0x51eb851f
 80003f8:	200003bc 	.word	0x200003bc

080003fc <EXTI15_10_IRQHandler>:

/** handler for button PC8
 * Change to next wave in the sequence
 */
void EXTI15_10_IRQHandler(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

	// increment the wave index so we access a different wave
	wave_index++;
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <EXTI15_10_IRQHandler+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <EXTI15_10_IRQHandler+0x34>)
 8000408:	6013      	str	r3, [r2, #0]
	if (wave_index % NUM_WAVES == 0 ) {
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <EXTI15_10_IRQHandler+0x34>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0303 	and.w	r3, r3, #3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d102      	bne.n	800041c <EXTI15_10_IRQHandler+0x20>
		wave_index = 0;
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <EXTI15_10_IRQHandler+0x34>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
	}

	EXTI->PR = 0x2000; 		// clear the pending interrupt flag
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <EXTI15_10_IRQHandler+0x38>)
 800041e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000422:	615a      	str	r2, [r3, #20]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	200003a8 	.word	0x200003a8
 8000434:	40013c00 	.word	0x40013c00

08000438 <main>:


int main(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

	ADC_init();
 800043c:	f000 f846 	bl	80004cc <ADC_init>
	LED_init();
 8000440:	f000 fa48 	bl	80008d4 <LED_init>
	USART2_init();
 8000444:	f000 fa84 	bl	8000950 <USART2_init>
	SPI3_init();
 8000448:	f000 f952 	bl	80006f0 <SPI3_init>

	update_rate();
 800044c:	f000 f9d0 	bl	80007f0 <update_rate>
	update_depth();
 8000450:	f000 fa0e 	bl	8000870 <update_depth>
	control_sample_timer_config(); // sets up TIM2 to read ADCs periodically
 8000454:	f000 f8a4 	bl	80005a0 <control_sample_timer_config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i

	 // set up interrupts
	 __disable_irq(); // disables the global interrupt request
	 NVIC_EnableIRQ(TIM2_IRQn);				// enables the tim2 interrupt
 800045a:	201c      	movs	r0, #28
 800045c:	f7ff ff10 	bl	8000280 <__NVIC_EnableIRQ>
	 NVIC_SetPriority(TIM2_IRQn, CONTROL_SAMPLE_PRIO);	// sets the timer priority
 8000460:	2103      	movs	r1, #3
 8000462:	201c      	movs	r0, #28
 8000464:	f7ff ff2a 	bl	80002bc <__NVIC_SetPriority>

	 set_sysTick_interrupt(wavepoint_time_space);
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <main+0x88>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f8c1 	bl	80005f4 <set_sysTick_interrupt>
	 NVIC_SetPriority(SysTick_IRQn,PRIO_SYSTICK);
 8000472:	2104      	movs	r1, #4
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ff20 	bl	80002bc <__NVIC_SetPriority>

	 // set the push button interrupt
	 SYSCFG->EXTICR[3] &= ~0x00F0;       /* clear port selection for EXTI13 */
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <main+0x8c>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <main+0x8c>)
 8000482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000486:	6153      	str	r3, [r2, #20]
	 SYSCFG->EXTICR[3] |= 0x0020;        /* select port C for EXTI13 */
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <main+0x8c>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <main+0x8c>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6153      	str	r3, [r2, #20]

	 EXTI->IMR |= 0x2000;                /* unmask EXTI13 */
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <main+0x90>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <main+0x90>)
 800049a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800049e:	6013      	str	r3, [r2, #0]
	 EXTI->FTSR |= 0x2000;               /* select falling edge trigger- this was supposed to be falling edge but it wouldn't work on 0*/
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <main+0x90>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <main+0x90>)
 80004a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004aa:	60d3      	str	r3, [r2, #12]

	 NVIC_EnableIRQ(EXTI15_10_IRQn);						// enables the Button interrupt
 80004ac:	2028      	movs	r0, #40	; 0x28
 80004ae:	f7ff fee7 	bl	8000280 <__NVIC_EnableIRQ>
	 NVIC_SetPriority(EXTI15_10_IRQn, PRIO_BUTTON);		// sets the button priority
 80004b2:	2102      	movs	r1, #2
 80004b4:	2028      	movs	r0, #40	; 0x28
 80004b6:	f7ff ff01 	bl	80002bc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80004ba:	b662      	cpsie	i
	 __enable_irq();

	while(1) {
 80004bc:	e7fe      	b.n	80004bc <main+0x84>
 80004be:	bf00      	nop
 80004c0:	200003bc 	.word	0x200003bc
 80004c4:	40013800 	.word	0x40013800
 80004c8:	40013c00 	.word	0x40013c00

080004cc <ADC_init>:
// --------------------------------ADC Functions---------------------------------------------------------------------
/**
 * Initializes ADC to read both the Depth (PA0) and Rate (PA1)
 * Set up ADC to read both values on a read conversation
 */
void ADC_init(void) {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;	            /* enable GPIOA clock */
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <ADC_init+0x5c>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <ADC_init+0x5c>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= 0xC;           /* PA1 analog mode Rate */
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <ADC_init+0x60>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <ADC_init+0x60>)
 80004e2:	f043 030c 	orr.w	r3, r3, #12
 80004e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x3;		  /* PA0 to analog mode Depth Control*/
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <ADC_init+0x60>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0f      	ldr	r2, [pc, #60]	; (800052c <ADC_init+0x60>)
 80004ee:	f043 0303 	orr.w	r3, r3, #3
 80004f2:	6013      	str	r3, [r2, #0]

    /* setup ADC1 to read starting at PA0 */
    RCC->APB2ENR |= 0x00000100;     /* enable ADC1 clock */
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <ADC_init+0x5c>)
 80004f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <ADC_init+0x5c>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6453      	str	r3, [r2, #68]	; 0x44
    ADC1->CR2 = 0;                  /* SW trigger */
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <ADC_init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;                 /* conversion sequence starts at ch 0 */
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <ADC_init+0x64>)
 8000508:	2200      	movs	r2, #0
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
    ADC1->SQR1 = 0;                 /* conversion sequence length 1 */
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <ADC_init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
    ADC1->CR2 |= 1;                 /* enable ADC1 */
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <ADC_init+0x64>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <ADC_init+0x64>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6093      	str	r3, [r2, #8]
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	40020000 	.word	0x40020000
 8000530:	40012000 	.word	0x40012000

08000534 <read_pot_percent>:

/** returns the float percentage of the ADC - based off resolution of the ADC */
float read_pot_percent(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	return (float)read_ADC_step() / (ADC_RES);
 8000538:	f000 f812 	bl	8000560 <read_ADC_step>
 800053c:	ee07 0a90 	vmov	s15, r0
 8000540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000544:	eddf 7a05 	vldr	s15, [pc, #20]	; 800055c <read_pot_percent+0x28>
 8000548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800054c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000550:	eef0 7a66 	vmov.f32	s15, s13
}
 8000554:	eeb0 0a67 	vmov.f32	s0, s15
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	00001000 	.word	0x00001000

08000560 <read_ADC_step>:

/** returns the discrete value between 0 and RES */
int read_ADC_step(void) {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x00000100;     /* enable ADC1 clock */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <read_ADC_step+0x38>)
 8000566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <read_ADC_step+0x38>)
 800056a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800056e:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR2 |= 0x40000000;        /* start a conversion */
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <read_ADC_step+0x3c>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <read_ADC_step+0x3c>)
 8000576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800057a:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)) {}       /* wait for conv complete */
 800057c:	bf00      	nop
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <read_ADC_step+0x3c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <read_ADC_step+0x1e>

	return (ADC1->DR);
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <read_ADC_step+0x3c>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40023800 	.word	0x40023800
 800059c:	40012000 	.word	0x40012000

080005a0 <control_sample_timer_config>:

/**
 * Using TIM2 sets a triggers an interrupt every control_sample_time micro seconds
 * Used to control the read time of the ADC, every time this timer fires we read the ADC
 */
void control_sample_timer_config(void) {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	// set up timer to to interrupt when we should sample
	RCC->APB1ENR |= 1;              /* enable TIM2 clock */
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <control_sample_timer_config+0x4c>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <control_sample_timer_config+0x4c>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16-1;               /* divided by 16  (use N-1) - dividing by 16 gets in in u sec*/
 80005b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b4:	220f      	movs	r2, #15
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = control_sample_time-1;              /* sampling frequency is the number of micro seconds to count to*/
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <control_sample_timer_config+0x50>)
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;                  /* clear timer counter */
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = 1;                  /* enable TIM2 */
 80005ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]

	TIM2->DIER |= 1;				// enable the Update Interrupt Enable
 80005d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	60d3      	str	r3, [r2, #12]
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40023800 	.word	0x40023800
 80005f0:	000186a0 	.word	0x000186a0

080005f4 <set_sysTick_interrupt>:
 * Sets up the SysTick interrupt to fire
 * clk_div divdes the clock so clk_div = 16000000 gets a
 * 1 sec interrupt
 * here clk_div param is assumed to be milli seconds
 */
void set_sysTick_interrupt(int clk_div) {
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= 0x4000; // enable the SysCFG clk, used for sysTick
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <set_sysTick_interrupt+0x64>)
 80005fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <set_sysTick_interrupt+0x64>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6453      	str	r3, [r2, #68]	; 0x44
	// config SysTick to be in interrupt mode
	uint32_t sysClk = 16000000; //Hz
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <set_sysTick_interrupt+0x68>)
 800060a:	60fb      	str	r3, [r7, #12]
	float time = 0.001; //sec
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <set_sysTick_interrupt+0x6c>)
 800060e:	60bb      	str	r3, [r7, #8]
	SysTick->LOAD = (int)(time * sysClk * clk_div)-1; // set reload to 1 ms times clk_div ms to get clk_div ms
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800061a:	edd7 7a02 	vldr	s15, [r7, #8]
 800061e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000634:	ee17 3a90 	vmov	r3, s15
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <set_sysTick_interrupt+0x70>)
 800063c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <set_sysTick_interrupt+0x70>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x7;			//enables the SysTick interrupt
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <set_sysTick_interrupt+0x70>)
 8000646:	2207      	movs	r2, #7
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	00f42400 	.word	0x00f42400
 8000660:	3a83126f 	.word	0x3a83126f
 8000664:	e000e010 	.word	0xe000e010

08000668 <config_SPI_pins>:

// -------------------------------------------------- Voltage output -----------------------------------------------------
/** sets up pins to use for SPI lines to communicate with the MCP4911 DAC
 * on this DAC, when LDAC pin goes LOW DAC does conversion and writes to VOUT
 */
void config_SPI_pins(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 1<<3; 				//enable GPIOD
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <config_SPI_pins+0x80>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <config_SPI_pins+0x80>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= 1<<2;				// enable GPIOC
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <config_SPI_pins+0x80>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <config_SPI_pins+0x80>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
	// initialize •	Use PC10, PC12, PC11, and PD2 for SCK, MOSI, SS, and LDAC_
	GPIOC->AFR[1] |= 0x6<<(4*2); 		/*set PC10 to SPI3 CLK*/
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <config_SPI_pins+0x84>)
 8000686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <config_SPI_pins+0x84>)
 800068a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800068e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->MODER &= ~(0x3<<(2*10));		/* clear MODER for PC10*/
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <config_SPI_pins+0x84>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a15      	ldr	r2, [pc, #84]	; (80006ec <config_SPI_pins+0x84>)
 8000696:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800069a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x2<<((2*10)));	/* set PC10 to AF 10*/
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <config_SPI_pins+0x84>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <config_SPI_pins+0x84>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a6:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[1] |= 0x6<<(4*4);		/*set PC12 to MOSI */
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <config_SPI_pins+0x84>)
 80006aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <config_SPI_pins+0x84>)
 80006ae:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80006b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->MODER &= ~(0x3<<(2*12));		/* clear MODER for PC12*/
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <config_SPI_pins+0x84>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <config_SPI_pins+0x84>)
 80006ba:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x2<<((2*12)));	/* set PC10 to AF 12*/
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <config_SPI_pins+0x84>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a09      	ldr	r2, [pc, #36]	; (80006ec <config_SPI_pins+0x84>)
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	6013      	str	r3, [r2, #0]

	PXx_OUT_MODER_config(SS_PIN,SS_GPIO);		/*set PC11 to general output mode for SS */
 80006cc:	2143      	movs	r1, #67	; 0x43
 80006ce:	200b      	movs	r0, #11
 80006d0:	f000 f99a 	bl	8000a08 <PXx_OUT_MODER_config>

	PXx_OUT_MODER_config(LDAC_PIN,LDAC_GPIO);		/*set PD2 to general output mode for LDAC*/
 80006d4:	2144      	movs	r1, #68	; 0x44
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f996 	bl	8000a08 <PXx_OUT_MODER_config>

	turn_on_PXnum(LDAC_PIN, LDAC_GPIO);			    /* set LDAC HIGH to start - latch closed aka don't write to VOUT*/
 80006dc:	2144      	movs	r1, #68	; 0x44
 80006de:	2002      	movs	r0, #2
 80006e0:	f000 fa14 	bl	8000b0c <turn_on_PXnum>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800

080006f0 <SPI3_init>:

/**Configures and enables the SPI3 module */
void SPI3_init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	config_SPI_pins();
 80006f4:	f7ff ffb8 	bl	8000668 <config_SPI_pins>
	RCC->APB1ENR |= (1<<15);			/* Enable SPI3 CLK */
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <SPI3_init+0x80>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <SPI3_init+0x80>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= 1;					/* enable GPIOA clock*/
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <SPI3_init+0x80>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <SPI3_init+0x80>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->AFR[0] |= 0x6<<(4*4);		/*set PA4 to alternate function 6 */
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <SPI3_init+0x84>)
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <SPI3_init+0x84>)
 8000716:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800071a:	6213      	str	r3, [r2, #32]
	GPIOA->MODER &= ~(0x3<<(2*4));		/* clear MODER for PA4*/
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <SPI3_init+0x84>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <SPI3_init+0x84>)
 8000722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000726:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<((2*4)));		/* set PA4 to AF */
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <SPI3_init+0x84>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <SPI3_init+0x84>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6013      	str	r3, [r2, #0]
	//NSS pin needs to be tied high - PA4 needs to be tied to HIGH (3.3)
	SPI3->CR1 |= (1<<11);				/* sets SPI to send 16 bits */
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <SPI3_init+0x88>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <SPI3_init+0x88>)
 800073a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800073e:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1<<2);				/* Master selection */
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <SPI3_init+0x88>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <SPI3_init+0x88>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (1<<3);				/*Set the baud rate to 1*/
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <SPI3_init+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <SPI3_init+0x88>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6013      	str	r3, [r2, #0]
	SPI3->CR2 = 0;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <SPI3_init+0x88>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
	SPI3->CR1 |= 0x40;			/* Enable the SPI*/
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SPI3_init+0x88>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SPI3_init+0x88>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6013      	str	r3, [r2, #0]
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000
 8000778:	40003c00 	.word	0x40003c00

0800077c <DAC_write>:

/** Write digital data value to the DAC */
void DAC_write(short data) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]

	while(!(SPI3->SR & 2)) {}
 8000786:	bf00      	nop
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <DAC_write+0x70>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <DAC_write+0xc>

	turn_off_PXnum(SS_PIN,SS_GPIO); 	// bring SS low
 8000794:	2143      	movs	r1, #67	; 0x43
 8000796:	200b      	movs	r0, #11
 8000798:	f000 f9a6 	bl	8000ae8 <turn_off_PXnum>

	// write data and fill config bits 0011 with MSB first
	SPI3->DR = 0x3000 | (data << 2);
 800079c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <DAC_write+0x70>)
 80007a8:	60da      	str	r2, [r3, #12]

	while(SPI3->SR & 0x80) {}					// wait for the transmission to be done. while busy wait
 80007aa:	bf00      	nop
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <DAC_write+0x70>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f9      	bne.n	80007ac <DAC_write+0x30>
	//bring SS high - we are done writing
	turn_on_PXnum(SS_PIN, SS_GPIO);
 80007b8:	2143      	movs	r1, #67	; 0x43
 80007ba:	200b      	movs	r0, #11
 80007bc:	f000 f9a6 	bl	8000b0c <turn_on_PXnum>

	turn_off_PXnum(LDAC_PIN, LDAC_GPIO);			// set LDAC low - this tells the DAC to process the value we sent it
 80007c0:	2144      	movs	r1, #68	; 0x44
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 f990 	bl	8000ae8 <turn_off_PXnum>
	for(int i=0; i<10; i++) {}						// some delay
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e002      	b.n	80007d4 <DAC_write+0x58>
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	ddf9      	ble.n	80007ce <DAC_write+0x52>
	turn_on_PXnum(LDAC_PIN, LDAC_GPIO);			// bring LDAC high again
 80007da:	2144      	movs	r1, #68	; 0x44
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 f995 	bl	8000b0c <turn_on_PXnum>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40003c00 	.word	0x40003c00

080007f0 <update_rate>:

// ------------------------------------------------- Control Functions ---------------------------------------------------
/** Reads Rate Pot PA1 and updates rate global variable */
void update_rate(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	ADC1->SQR3 = 1;                 /* conversion sequence starts at ch 1 which maps to PA1 */
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <update_rate+0x70>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= 1;                 /* enable ADC1 */
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <update_rate+0x70>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <update_rate+0x70>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6093      	str	r3, [r2, #8]
	float pot_perc = read_pot_percent();
 8000808:	f7ff fe94 	bl	8000534 <read_pot_percent>
 800080c:	ed87 0a01 	vstr	s0, [r7, #4]
	rate = (pot_perc * (MAXRATE - MINRATE)) + MINRATE;
 8000810:	2264      	movs	r2, #100	; 0x64
 8000812:	f240 134d 	movw	r3, #333	; 0x14d
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000820:	edd7 7a01 	vldr	s15, [r7, #4]
 8000824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000828:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000864 <update_rate+0x74>
 800082c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000838:	ee17 2a90 	vmov	r2, s15
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <update_rate+0x78>)
 800083e:	601a      	str	r2, [r3, #0]
	// reset the period of our wave
	wavepoint_time_space = rate / num_wavepoints_per_cycle; // in ms
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <update_rate+0x78>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2232      	movs	r2, #50	; 0x32
 8000846:	fb93 f3f2 	sdiv	r3, r3, r2
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <update_rate+0x7c>)
 800084c:	6013      	str	r3, [r2, #0]
	set_sysTick_interrupt(wavepoint_time_space); // reset the wave period when rate is updated
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <update_rate+0x7c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fece 	bl	80005f4 <set_sysTick_interrupt>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40012000 	.word	0x40012000
 8000864:	0000014d 	.word	0x0000014d
 8000868:	200003a4 	.word	0x200003a4
 800086c:	200003bc 	.word	0x200003bc

08000870 <update_depth>:

/** Reads Depth Pot PA0 and updates depth global variable */
void update_depth(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	ADC1->SQR3 = 0;                 /* conversion sequence starts at ch 0 which maps to PA0 */
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <update_depth+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= 1;                 /* enable ADC1 */
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <update_depth+0x58>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <update_depth+0x58>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6093      	str	r3, [r2, #8]
	float pot_perc = read_pot_percent();
 8000888:	f7ff fe54 	bl	8000534 <read_pot_percent>
 800088c:	ed87 0a01 	vstr	s0, [r7, #4]
	depth = (pot_perc * (MAXDEPTH - MINDEPTH)) + MINDEPTH;
 8000890:	2200      	movs	r2, #0
 8000892:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80008cc <update_depth+0x5c>
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b8:	ee17 2a90 	vmov	r2, s15
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <update_depth+0x60>)
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40012000 	.word	0x40012000
 80008cc:	000003ff 	.word	0x000003ff
 80008d0:	200003a0 	.word	0x200003a0

080008d4 <LED_init>:

// --------------------------------------------------Utility Functions-----------------------------------------------------

void LED_init(void) {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
    // configure PA5 as output to drive the LED
    RCC->AHB1ENR |=  1;             /* enable GPIOA clock */
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <LED_init+0x3c>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <LED_init+0x3c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x00000C00;    /* clear pin mode */
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <LED_init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LED_init+0x40>)
 80008ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000400;    /* set pin to output mode */
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <LED_init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <LED_init+0x40>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR   = (1<<21);        /* Turn LED off           */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <LED_init+0x40>)
 80008fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000902:	619a      	str	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000

08000918 <myprint>:

    SysTick->CTRL = 0; 	/* Stop the timer (Enable = 0) */

}

void myprint(char msg[]){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint8_t idx=0;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
	while(msg[idx]!='\0' ){
 8000924:	e009      	b.n	800093a <myprint+0x22>
		USART2_write(msg[idx++]);
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	73fa      	strb	r2, [r7, #15]
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f84f 	bl	80009d8 <USART2_write>
	while(msg[idx]!='\0' ){
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ef      	bne.n	8000926 <myprint+0xe>
	}
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <USART2_init>:

/* initialize USART2 to transmit at 115200 Baud */
void USART2_init(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <USART2_init+0x7c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <USART2_init+0x7c>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <USART2_init+0x7c>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <USART2_init+0x7c>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Configure PA2, PA3 for USART2 TX, RX */
    GPIOA->AFR[0] &= ~0xFF00;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <USART2_init+0x80>)
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <USART2_init+0x80>)
 8000972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000976:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x7700;   /* alt7 for USART2 */
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <USART2_init+0x80>)
 800097a:	6a1b      	ldr	r3, [r3, #32]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <USART2_init+0x80>)
 800097e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000982:	6213      	str	r3, [r2, #32]
    GPIOA->MODER  &= ~0x00F0;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <USART2_init+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <USART2_init+0x80>)
 800098a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800098e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER  |=  0x00A0;   /* enable alt. function for PA2, PA3 */
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <USART2_init+0x80>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <USART2_init+0x80>)
 8000996:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800099a:	6013      	str	r3, [r2, #0]

    USART2->BRR = 0x008B;       /* 115200 baud @ 16 MHz */
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <USART2_init+0x84>)
 800099e:	228b      	movs	r2, #139	; 0x8b
 80009a0:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x000C;       /* enable Tx, Rx, 8-bit data */
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <USART2_init+0x84>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;       /* 1 stop bit */
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <USART2_init+0x84>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;       /* no flow control */
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <USART2_init+0x84>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
    USART2->CR1 |= 0x2000;      /* enable USART2 */
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <USART2_init+0x84>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <USART2_init+0x84>)
 80009ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40004400 	.word	0x40004400

080009d8 <USART2_write>:

/* Write a character to USART2 */
void USART2_write (int ch) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
 80009e0:	bf00      	nop
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <USART2_write+0x2c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f9      	beq.n	80009e2 <USART2_write+0xa>
    USART2->DR = (ch & 0xFF);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <USART2_write+0x2c>)
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	6053      	str	r3, [r2, #4]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400

08000a08 <PXx_OUT_MODER_config>:
	GPIOC->MODER &= ~(0x3<<(2*13)); // clears 2 in/out mode for PC13
	// This should be unnecessary: GPIOC->MODER |= (0<<(2*13)); // this sets bits 2 mode bits for PC13 to input 00
}

/** set up Specific GPIO pin to be general output */
int PXx_OUT_MODER_config(int PX_num, char GPIO) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	if (GPIO == 'B' || GPIO == 'b') {
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b42      	cmp	r3, #66	; 0x42
 8000a18:	d002      	beq.n	8000a20 <PXx_OUT_MODER_config+0x18>
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	2b62      	cmp	r3, #98	; 0x62
 8000a1e:	d117      	bne.n	8000a50 <PXx_OUT_MODER_config+0x48>
		GPIOB->MODER &= ~(0x3<<(2*PX_num)); // clears 2 in/out mode for PBpc_num
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <PXx_OUT_MODER_config+0xd4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	2103      	movs	r1, #3
 8000a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2e:	43d2      	mvns	r2, r2
 8000a30:	4611      	mov	r1, r2
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <PXx_OUT_MODER_config+0xd4>)
 8000a34:	400b      	ands	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (1<<(2*PX_num)); // this sets bits 2 mode bits for PBc_num General purpose output mode 01
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <PXx_OUT_MODER_config+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a24      	ldr	r2, [pc, #144]	; (8000adc <PXx_OUT_MODER_config+0xd4>)
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e03e      	b.n	8000ace <PXx_OUT_MODER_config+0xc6>
	} else if (GPIO == 'C' || GPIO == 'c') {
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b43      	cmp	r3, #67	; 0x43
 8000a54:	d002      	beq.n	8000a5c <PXx_OUT_MODER_config+0x54>
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b63      	cmp	r3, #99	; 0x63
 8000a5a:	d117      	bne.n	8000a8c <PXx_OUT_MODER_config+0x84>
		GPIOC->MODER &= ~(0x3<<(2*PX_num)); // clears 2 in/out mode for PCpc_num
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <PXx_OUT_MODER_config+0xd8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	2103      	movs	r1, #3
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	43d2      	mvns	r2, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <PXx_OUT_MODER_config+0xd8>)
 8000a70:	400b      	ands	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= (1<<(2*PX_num)); // this sets bits 2 mode bits for PCpc_num General purpose output mode 01
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <PXx_OUT_MODER_config+0xd8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <PXx_OUT_MODER_config+0xd8>)
 8000a86:	430b      	orrs	r3, r1
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e020      	b.n	8000ace <PXx_OUT_MODER_config+0xc6>
	} else if (GPIO == 'D' || GPIO == 'd') {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b44      	cmp	r3, #68	; 0x44
 8000a90:	d002      	beq.n	8000a98 <PXx_OUT_MODER_config+0x90>
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b64      	cmp	r3, #100	; 0x64
 8000a96:	d117      	bne.n	8000ac8 <PXx_OUT_MODER_config+0xc0>
		GPIOD->MODER &= ~(0x3<<(2*PX_num)); // clears 2 in/out mode for PCpc_num
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <PXx_OUT_MODER_config+0xdc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	0052      	lsls	r2, r2, #1
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <PXx_OUT_MODER_config+0xdc>)
 8000aac:	400b      	ands	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1<<(2*PX_num)); // this sets bits 2 mode bits for PCpc_num General purpose output mode 01
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <PXx_OUT_MODER_config+0xdc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <PXx_OUT_MODER_config+0xdc>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e002      	b.n	8000ace <PXx_OUT_MODER_config+0xc6>
	} else {
		// unsupported GIPO choice
		return -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	e000      	b.n	8000ad0 <PXx_OUT_MODER_config+0xc8>
	}
	return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <turn_off_PXnum>:

/** Turns off PC(pc_num) */
void turn_off_PXnum(int px_num,char GPIO) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef * selected_GPIO = select_GPIO(GPIO);
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f820 	bl	8000b3c <select_GPIO>
 8000afc:	60f8      	str	r0, [r7, #12]
	selected_GPIO->ODR = (0x0<<px_num);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <turn_on_PXnum>:

/** turns PC(pc_num) to high  */
void turn_on_PXnum(int px_num, char GPIO) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef * selected_GPIO = select_GPIO(GPIO);
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f80e 	bl	8000b3c <select_GPIO>
 8000b20:	60f8      	str	r0, [r7, #12]
	selected_GPIO->ODR |= (0x1<<px_num);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	2101      	movs	r1, #1
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	615a      	str	r2, [r3, #20]
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <select_GPIO>:

/** returns the GPIO pointer based on the GPIO char */
GPIO_TypeDef * select_GPIO(char GPIO) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]

	if (GPIO == 'A') {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b41      	cmp	r3, #65	; 0x41
 8000b4a:	d101      	bne.n	8000b50 <select_GPIO+0x14>
		return GPIOA;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <select_GPIO+0x40>)
 8000b4e:	e00f      	b.n	8000b70 <select_GPIO+0x34>
	} else if(GPIO == 'B') {
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b42      	cmp	r3, #66	; 0x42
 8000b54:	d101      	bne.n	8000b5a <select_GPIO+0x1e>
		return GPIOB;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <select_GPIO+0x44>)
 8000b58:	e00a      	b.n	8000b70 <select_GPIO+0x34>
	} else if (GPIO =='C') {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b43      	cmp	r3, #67	; 0x43
 8000b5e:	d101      	bne.n	8000b64 <select_GPIO+0x28>
		return GPIOC;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <select_GPIO+0x48>)
 8000b62:	e005      	b.n	8000b70 <select_GPIO+0x34>
	} else if (GPIO == 'D') {
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b44      	cmp	r3, #68	; 0x44
 8000b68:	d101      	bne.n	8000b6e <select_GPIO+0x32>
		return GPIOD;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <select_GPIO+0x4c>)
 8000b6c:	e000      	b.n	8000b70 <select_GPIO+0x34>
	} else {
		return GPIOE;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <select_GPIO+0x50>)
	}
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f000 f85c 	bl	8000cc4 <__errno>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	200003b0 	.word	0x200003b0
 8000c40:	200003c8 	.word	0x200003c8

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <SystemInit+0x28>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <SystemInit+0x28>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SystemInit+0x28>)
 8000c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c76:	e003      	b.n	8000c80 <LoopCopyDataInit>

08000c78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c7e:	3104      	adds	r1, #4

08000c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c88:	d3f6      	bcc.n	8000c78 <CopyDataInit>
  ldr  r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c8c:	e002      	b.n	8000c94 <LoopFillZerobss>

08000c8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c90:	f842 3b04 	str.w	r3, [r2], #4

08000c94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c98:	d3f9      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd3 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f000 f817 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fbc9 	bl	8000438 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cac:	0800157c 	.word	0x0800157c
  ldr  r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb4:	20000384 	.word	0x20000384
  ldr  r2, =_sbss
 8000cb8:	20000384 	.word	0x20000384
  ldr  r3, = _ebss
 8000cbc:	200003c4 	.word	0x200003c4

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <__errno>:
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <__errno+0x8>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000320 	.word	0x20000320

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4e0d      	ldr	r6, [pc, #52]	; (8000d08 <__libc_init_array+0x38>)
 8000cd4:	4c0d      	ldr	r4, [pc, #52]	; (8000d0c <__libc_init_array+0x3c>)
 8000cd6:	1ba4      	subs	r4, r4, r6
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	2500      	movs	r5, #0
 8000cdc:	42a5      	cmp	r5, r4
 8000cde:	d109      	bne.n	8000cf4 <__libc_init_array+0x24>
 8000ce0:	4e0b      	ldr	r6, [pc, #44]	; (8000d10 <__libc_init_array+0x40>)
 8000ce2:	4c0c      	ldr	r4, [pc, #48]	; (8000d14 <__libc_init_array+0x44>)
 8000ce4:	f000 fc1e 	bl	8001524 <_init>
 8000ce8:	1ba4      	subs	r4, r4, r6
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	2500      	movs	r5, #0
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d105      	bne.n	8000cfe <__libc_init_array+0x2e>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cf8:	4798      	blx	r3
 8000cfa:	3501      	adds	r5, #1
 8000cfc:	e7ee      	b.n	8000cdc <__libc_init_array+0xc>
 8000cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d02:	4798      	blx	r3
 8000d04:	3501      	adds	r5, #1
 8000d06:	e7f2      	b.n	8000cee <__libc_init_array+0x1e>
 8000d08:	08001574 	.word	0x08001574
 8000d0c:	08001574 	.word	0x08001574
 8000d10:	08001574 	.word	0x08001574
 8000d14:	08001578 	.word	0x08001578

08000d18 <siprintf>:
 8000d18:	b40e      	push	{r1, r2, r3}
 8000d1a:	b500      	push	{lr}
 8000d1c:	b09c      	sub	sp, #112	; 0x70
 8000d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8000d20:	9002      	str	r0, [sp, #8]
 8000d22:	9006      	str	r0, [sp, #24]
 8000d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <siprintf+0x38>)
 8000d2a:	9107      	str	r1, [sp, #28]
 8000d2c:	9104      	str	r1, [sp, #16]
 8000d2e:	4909      	ldr	r1, [pc, #36]	; (8000d54 <siprintf+0x3c>)
 8000d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d34:	9105      	str	r1, [sp, #20]
 8000d36:	6800      	ldr	r0, [r0, #0]
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	a902      	add	r1, sp, #8
 8000d3c:	f000 f866 	bl	8000e0c <_svfiprintf_r>
 8000d40:	9b02      	ldr	r3, [sp, #8]
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	b01c      	add	sp, #112	; 0x70
 8000d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d4c:	b003      	add	sp, #12
 8000d4e:	4770      	bx	lr
 8000d50:	20000320 	.word	0x20000320
 8000d54:	ffff0208 	.word	0xffff0208

08000d58 <__ssputs_r>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	688e      	ldr	r6, [r1, #8]
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	4682      	mov	sl, r0
 8000d62:	460c      	mov	r4, r1
 8000d64:	4690      	mov	r8, r2
 8000d66:	4699      	mov	r9, r3
 8000d68:	d837      	bhi.n	8000dda <__ssputs_r+0x82>
 8000d6a:	898a      	ldrh	r2, [r1, #12]
 8000d6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d70:	d031      	beq.n	8000dd6 <__ssputs_r+0x7e>
 8000d72:	6825      	ldr	r5, [r4, #0]
 8000d74:	6909      	ldr	r1, [r1, #16]
 8000d76:	1a6f      	subs	r7, r5, r1
 8000d78:	6965      	ldr	r5, [r4, #20]
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d80:	fb95 f5f3 	sdiv	r5, r5, r3
 8000d84:	f109 0301 	add.w	r3, r9, #1
 8000d88:	443b      	add	r3, r7
 8000d8a:	429d      	cmp	r5, r3
 8000d8c:	bf38      	it	cc
 8000d8e:	461d      	movcc	r5, r3
 8000d90:	0553      	lsls	r3, r2, #21
 8000d92:	d530      	bpl.n	8000df6 <__ssputs_r+0x9e>
 8000d94:	4629      	mov	r1, r5
 8000d96:	f000 fb2b 	bl	80013f0 <_malloc_r>
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	b950      	cbnz	r0, 8000db4 <__ssputs_r+0x5c>
 8000d9e:	230c      	movs	r3, #12
 8000da0:	f8ca 3000 	str.w	r3, [sl]
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000daa:	81a3      	strh	r3, [r4, #12]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	463a      	mov	r2, r7
 8000db6:	6921      	ldr	r1, [r4, #16]
 8000db8:	f000 faa8 	bl	800130c <memcpy>
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc6:	81a3      	strh	r3, [r4, #12]
 8000dc8:	6126      	str	r6, [r4, #16]
 8000dca:	6165      	str	r5, [r4, #20]
 8000dcc:	443e      	add	r6, r7
 8000dce:	1bed      	subs	r5, r5, r7
 8000dd0:	6026      	str	r6, [r4, #0]
 8000dd2:	60a5      	str	r5, [r4, #8]
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	454e      	cmp	r6, r9
 8000dd8:	d900      	bls.n	8000ddc <__ssputs_r+0x84>
 8000dda:	464e      	mov	r6, r9
 8000ddc:	4632      	mov	r2, r6
 8000dde:	4641      	mov	r1, r8
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	f000 fa9e 	bl	8001322 <memmove>
 8000de6:	68a3      	ldr	r3, [r4, #8]
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	60a3      	str	r3, [r4, #8]
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	441e      	add	r6, r3
 8000df0:	6026      	str	r6, [r4, #0]
 8000df2:	2000      	movs	r0, #0
 8000df4:	e7dc      	b.n	8000db0 <__ssputs_r+0x58>
 8000df6:	462a      	mov	r2, r5
 8000df8:	f000 fb54 	bl	80014a4 <_realloc_r>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d1e2      	bne.n	8000dc8 <__ssputs_r+0x70>
 8000e02:	6921      	ldr	r1, [r4, #16]
 8000e04:	4650      	mov	r0, sl
 8000e06:	f000 faa5 	bl	8001354 <_free_r>
 8000e0a:	e7c8      	b.n	8000d9e <__ssputs_r+0x46>

08000e0c <_svfiprintf_r>:
 8000e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e10:	461d      	mov	r5, r3
 8000e12:	898b      	ldrh	r3, [r1, #12]
 8000e14:	061f      	lsls	r7, r3, #24
 8000e16:	b09d      	sub	sp, #116	; 0x74
 8000e18:	4680      	mov	r8, r0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	4616      	mov	r6, r2
 8000e1e:	d50f      	bpl.n	8000e40 <_svfiprintf_r+0x34>
 8000e20:	690b      	ldr	r3, [r1, #16]
 8000e22:	b96b      	cbnz	r3, 8000e40 <_svfiprintf_r+0x34>
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	f000 fae3 	bl	80013f0 <_malloc_r>
 8000e2a:	6020      	str	r0, [r4, #0]
 8000e2c:	6120      	str	r0, [r4, #16]
 8000e2e:	b928      	cbnz	r0, 8000e3c <_svfiprintf_r+0x30>
 8000e30:	230c      	movs	r3, #12
 8000e32:	f8c8 3000 	str.w	r3, [r8]
 8000e36:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3a:	e0c8      	b.n	8000fce <_svfiprintf_r+0x1c2>
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	6163      	str	r3, [r4, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	9309      	str	r3, [sp, #36]	; 0x24
 8000e44:	2320      	movs	r3, #32
 8000e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e4a:	2330      	movs	r3, #48	; 0x30
 8000e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e50:	9503      	str	r5, [sp, #12]
 8000e52:	f04f 0b01 	mov.w	fp, #1
 8000e56:	4637      	mov	r7, r6
 8000e58:	463d      	mov	r5, r7
 8000e5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e5e:	b10b      	cbz	r3, 8000e64 <_svfiprintf_r+0x58>
 8000e60:	2b25      	cmp	r3, #37	; 0x25
 8000e62:	d13e      	bne.n	8000ee2 <_svfiprintf_r+0xd6>
 8000e64:	ebb7 0a06 	subs.w	sl, r7, r6
 8000e68:	d00b      	beq.n	8000e82 <_svfiprintf_r+0x76>
 8000e6a:	4653      	mov	r3, sl
 8000e6c:	4632      	mov	r2, r6
 8000e6e:	4621      	mov	r1, r4
 8000e70:	4640      	mov	r0, r8
 8000e72:	f7ff ff71 	bl	8000d58 <__ssputs_r>
 8000e76:	3001      	adds	r0, #1
 8000e78:	f000 80a4 	beq.w	8000fc4 <_svfiprintf_r+0x1b8>
 8000e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e7e:	4453      	add	r3, sl
 8000e80:	9309      	str	r3, [sp, #36]	; 0x24
 8000e82:	783b      	ldrb	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 809d 	beq.w	8000fc4 <_svfiprintf_r+0x1b8>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e94:	9304      	str	r3, [sp, #16]
 8000e96:	9307      	str	r3, [sp, #28]
 8000e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8000e9e:	462f      	mov	r7, r5
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000ea6:	4850      	ldr	r0, [pc, #320]	; (8000fe8 <_svfiprintf_r+0x1dc>)
 8000ea8:	f7ff f99a 	bl	80001e0 <memchr>
 8000eac:	9b04      	ldr	r3, [sp, #16]
 8000eae:	b9d0      	cbnz	r0, 8000ee6 <_svfiprintf_r+0xda>
 8000eb0:	06d9      	lsls	r1, r3, #27
 8000eb2:	bf44      	itt	mi
 8000eb4:	2220      	movmi	r2, #32
 8000eb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000eba:	071a      	lsls	r2, r3, #28
 8000ebc:	bf44      	itt	mi
 8000ebe:	222b      	movmi	r2, #43	; 0x2b
 8000ec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ec4:	782a      	ldrb	r2, [r5, #0]
 8000ec6:	2a2a      	cmp	r2, #42	; 0x2a
 8000ec8:	d015      	beq.n	8000ef6 <_svfiprintf_r+0xea>
 8000eca:	9a07      	ldr	r2, [sp, #28]
 8000ecc:	462f      	mov	r7, r5
 8000ece:	2000      	movs	r0, #0
 8000ed0:	250a      	movs	r5, #10
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ed8:	3b30      	subs	r3, #48	; 0x30
 8000eda:	2b09      	cmp	r3, #9
 8000edc:	d94d      	bls.n	8000f7a <_svfiprintf_r+0x16e>
 8000ede:	b1b8      	cbz	r0, 8000f10 <_svfiprintf_r+0x104>
 8000ee0:	e00f      	b.n	8000f02 <_svfiprintf_r+0xf6>
 8000ee2:	462f      	mov	r7, r5
 8000ee4:	e7b8      	b.n	8000e58 <_svfiprintf_r+0x4c>
 8000ee6:	4a40      	ldr	r2, [pc, #256]	; (8000fe8 <_svfiprintf_r+0x1dc>)
 8000ee8:	1a80      	subs	r0, r0, r2
 8000eea:	fa0b f000 	lsl.w	r0, fp, r0
 8000eee:	4318      	orrs	r0, r3
 8000ef0:	9004      	str	r0, [sp, #16]
 8000ef2:	463d      	mov	r5, r7
 8000ef4:	e7d3      	b.n	8000e9e <_svfiprintf_r+0x92>
 8000ef6:	9a03      	ldr	r2, [sp, #12]
 8000ef8:	1d11      	adds	r1, r2, #4
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	9103      	str	r1, [sp, #12]
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	db01      	blt.n	8000f06 <_svfiprintf_r+0xfa>
 8000f02:	9207      	str	r2, [sp, #28]
 8000f04:	e004      	b.n	8000f10 <_svfiprintf_r+0x104>
 8000f06:	4252      	negs	r2, r2
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	9207      	str	r2, [sp, #28]
 8000f0e:	9304      	str	r3, [sp, #16]
 8000f10:	783b      	ldrb	r3, [r7, #0]
 8000f12:	2b2e      	cmp	r3, #46	; 0x2e
 8000f14:	d10c      	bne.n	8000f30 <_svfiprintf_r+0x124>
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	2b2a      	cmp	r3, #42	; 0x2a
 8000f1a:	d133      	bne.n	8000f84 <_svfiprintf_r+0x178>
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	1d1a      	adds	r2, r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	9203      	str	r2, [sp, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bfb8      	it	lt
 8000f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f2c:	3702      	adds	r7, #2
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	4d2e      	ldr	r5, [pc, #184]	; (8000fec <_svfiprintf_r+0x1e0>)
 8000f32:	7839      	ldrb	r1, [r7, #0]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4628      	mov	r0, r5
 8000f38:	f7ff f952 	bl	80001e0 <memchr>
 8000f3c:	b138      	cbz	r0, 8000f4e <_svfiprintf_r+0x142>
 8000f3e:	2340      	movs	r3, #64	; 0x40
 8000f40:	1b40      	subs	r0, r0, r5
 8000f42:	fa03 f000 	lsl.w	r0, r3, r0
 8000f46:	9b04      	ldr	r3, [sp, #16]
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	3701      	adds	r7, #1
 8000f4c:	9304      	str	r3, [sp, #16]
 8000f4e:	7839      	ldrb	r1, [r7, #0]
 8000f50:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <_svfiprintf_r+0x1e4>)
 8000f52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f56:	2206      	movs	r2, #6
 8000f58:	1c7e      	adds	r6, r7, #1
 8000f5a:	f7ff f941 	bl	80001e0 <memchr>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d038      	beq.n	8000fd4 <_svfiprintf_r+0x1c8>
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <_svfiprintf_r+0x1e8>)
 8000f64:	bb13      	cbnz	r3, 8000fac <_svfiprintf_r+0x1a0>
 8000f66:	9b03      	ldr	r3, [sp, #12]
 8000f68:	3307      	adds	r3, #7
 8000f6a:	f023 0307 	bic.w	r3, r3, #7
 8000f6e:	3308      	adds	r3, #8
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f74:	444b      	add	r3, r9
 8000f76:	9309      	str	r3, [sp, #36]	; 0x24
 8000f78:	e76d      	b.n	8000e56 <_svfiprintf_r+0x4a>
 8000f7a:	fb05 3202 	mla	r2, r5, r2, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	460f      	mov	r7, r1
 8000f82:	e7a6      	b.n	8000ed2 <_svfiprintf_r+0xc6>
 8000f84:	2300      	movs	r3, #0
 8000f86:	3701      	adds	r7, #1
 8000f88:	9305      	str	r3, [sp, #20]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	250a      	movs	r5, #10
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f94:	3a30      	subs	r2, #48	; 0x30
 8000f96:	2a09      	cmp	r2, #9
 8000f98:	d903      	bls.n	8000fa2 <_svfiprintf_r+0x196>
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0c8      	beq.n	8000f30 <_svfiprintf_r+0x124>
 8000f9e:	9105      	str	r1, [sp, #20]
 8000fa0:	e7c6      	b.n	8000f30 <_svfiprintf_r+0x124>
 8000fa2:	fb05 2101 	mla	r1, r5, r1, r2
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4607      	mov	r7, r0
 8000faa:	e7f0      	b.n	8000f8e <_svfiprintf_r+0x182>
 8000fac:	ab03      	add	r3, sp, #12
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_svfiprintf_r+0x1ec>)
 8000fb4:	a904      	add	r1, sp, #16
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000fc0:	4681      	mov	r9, r0
 8000fc2:	d1d6      	bne.n	8000f72 <_svfiprintf_r+0x166>
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	065b      	lsls	r3, r3, #25
 8000fc8:	f53f af35 	bmi.w	8000e36 <_svfiprintf_r+0x2a>
 8000fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000fce:	b01d      	add	sp, #116	; 0x74
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd4:	ab03      	add	r3, sp, #12
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4622      	mov	r2, r4
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_svfiprintf_r+0x1ec>)
 8000fdc:	a904      	add	r1, sp, #16
 8000fde:	4640      	mov	r0, r8
 8000fe0:	f000 f882 	bl	80010e8 <_printf_i>
 8000fe4:	e7ea      	b.n	8000fbc <_svfiprintf_r+0x1b0>
 8000fe6:	bf00      	nop
 8000fe8:	08001541 	.word	0x08001541
 8000fec:	08001547 	.word	0x08001547
 8000ff0:	0800154b 	.word	0x0800154b
 8000ff4:	00000000 	.word	0x00000000
 8000ff8:	08000d59 	.word	0x08000d59

08000ffc <_printf_common>:
 8000ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	4691      	mov	r9, r2
 8001002:	461f      	mov	r7, r3
 8001004:	688a      	ldr	r2, [r1, #8]
 8001006:	690b      	ldr	r3, [r1, #16]
 8001008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800100c:	4293      	cmp	r3, r2
 800100e:	bfb8      	it	lt
 8001010:	4613      	movlt	r3, r2
 8001012:	f8c9 3000 	str.w	r3, [r9]
 8001016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800101a:	4606      	mov	r6, r0
 800101c:	460c      	mov	r4, r1
 800101e:	b112      	cbz	r2, 8001026 <_printf_common+0x2a>
 8001020:	3301      	adds	r3, #1
 8001022:	f8c9 3000 	str.w	r3, [r9]
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	0699      	lsls	r1, r3, #26
 800102a:	bf42      	ittt	mi
 800102c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001030:	3302      	addmi	r3, #2
 8001032:	f8c9 3000 	strmi.w	r3, [r9]
 8001036:	6825      	ldr	r5, [r4, #0]
 8001038:	f015 0506 	ands.w	r5, r5, #6
 800103c:	d107      	bne.n	800104e <_printf_common+0x52>
 800103e:	f104 0a19 	add.w	sl, r4, #25
 8001042:	68e3      	ldr	r3, [r4, #12]
 8001044:	f8d9 2000 	ldr.w	r2, [r9]
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	42ab      	cmp	r3, r5
 800104c:	dc28      	bgt.n	80010a0 <_printf_common+0xa4>
 800104e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001052:	6822      	ldr	r2, [r4, #0]
 8001054:	3300      	adds	r3, #0
 8001056:	bf18      	it	ne
 8001058:	2301      	movne	r3, #1
 800105a:	0692      	lsls	r2, r2, #26
 800105c:	d42d      	bmi.n	80010ba <_printf_common+0xbe>
 800105e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001062:	4639      	mov	r1, r7
 8001064:	4630      	mov	r0, r6
 8001066:	47c0      	blx	r8
 8001068:	3001      	adds	r0, #1
 800106a:	d020      	beq.n	80010ae <_printf_common+0xb2>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	68e5      	ldr	r5, [r4, #12]
 8001070:	f8d9 2000 	ldr.w	r2, [r9]
 8001074:	f003 0306 	and.w	r3, r3, #6
 8001078:	2b04      	cmp	r3, #4
 800107a:	bf08      	it	eq
 800107c:	1aad      	subeq	r5, r5, r2
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	6922      	ldr	r2, [r4, #16]
 8001082:	bf0c      	ite	eq
 8001084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001088:	2500      	movne	r5, #0
 800108a:	4293      	cmp	r3, r2
 800108c:	bfc4      	itt	gt
 800108e:	1a9b      	subgt	r3, r3, r2
 8001090:	18ed      	addgt	r5, r5, r3
 8001092:	f04f 0900 	mov.w	r9, #0
 8001096:	341a      	adds	r4, #26
 8001098:	454d      	cmp	r5, r9
 800109a:	d11a      	bne.n	80010d2 <_printf_common+0xd6>
 800109c:	2000      	movs	r0, #0
 800109e:	e008      	b.n	80010b2 <_printf_common+0xb6>
 80010a0:	2301      	movs	r3, #1
 80010a2:	4652      	mov	r2, sl
 80010a4:	4639      	mov	r1, r7
 80010a6:	4630      	mov	r0, r6
 80010a8:	47c0      	blx	r8
 80010aa:	3001      	adds	r0, #1
 80010ac:	d103      	bne.n	80010b6 <_printf_common+0xba>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	3501      	adds	r5, #1
 80010b8:	e7c3      	b.n	8001042 <_printf_common+0x46>
 80010ba:	18e1      	adds	r1, r4, r3
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	2030      	movs	r0, #48	; 0x30
 80010c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010c4:	4422      	add	r2, r4
 80010c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010ce:	3302      	adds	r3, #2
 80010d0:	e7c5      	b.n	800105e <_printf_common+0x62>
 80010d2:	2301      	movs	r3, #1
 80010d4:	4622      	mov	r2, r4
 80010d6:	4639      	mov	r1, r7
 80010d8:	4630      	mov	r0, r6
 80010da:	47c0      	blx	r8
 80010dc:	3001      	adds	r0, #1
 80010de:	d0e6      	beq.n	80010ae <_printf_common+0xb2>
 80010e0:	f109 0901 	add.w	r9, r9, #1
 80010e4:	e7d8      	b.n	8001098 <_printf_common+0x9c>
	...

080010e8 <_printf_i>:
 80010e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80010f0:	460c      	mov	r4, r1
 80010f2:	7e09      	ldrb	r1, [r1, #24]
 80010f4:	b085      	sub	sp, #20
 80010f6:	296e      	cmp	r1, #110	; 0x6e
 80010f8:	4617      	mov	r7, r2
 80010fa:	4606      	mov	r6, r0
 80010fc:	4698      	mov	r8, r3
 80010fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001100:	f000 80b3 	beq.w	800126a <_printf_i+0x182>
 8001104:	d822      	bhi.n	800114c <_printf_i+0x64>
 8001106:	2963      	cmp	r1, #99	; 0x63
 8001108:	d036      	beq.n	8001178 <_printf_i+0x90>
 800110a:	d80a      	bhi.n	8001122 <_printf_i+0x3a>
 800110c:	2900      	cmp	r1, #0
 800110e:	f000 80b9 	beq.w	8001284 <_printf_i+0x19c>
 8001112:	2958      	cmp	r1, #88	; 0x58
 8001114:	f000 8083 	beq.w	800121e <_printf_i+0x136>
 8001118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800111c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001120:	e032      	b.n	8001188 <_printf_i+0xa0>
 8001122:	2964      	cmp	r1, #100	; 0x64
 8001124:	d001      	beq.n	800112a <_printf_i+0x42>
 8001126:	2969      	cmp	r1, #105	; 0x69
 8001128:	d1f6      	bne.n	8001118 <_printf_i+0x30>
 800112a:	6820      	ldr	r0, [r4, #0]
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	0605      	lsls	r5, r0, #24
 8001130:	f103 0104 	add.w	r1, r3, #4
 8001134:	d52a      	bpl.n	800118c <_printf_i+0xa4>
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6011      	str	r1, [r2, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da03      	bge.n	8001146 <_printf_i+0x5e>
 800113e:	222d      	movs	r2, #45	; 0x2d
 8001140:	425b      	negs	r3, r3
 8001142:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001146:	486f      	ldr	r0, [pc, #444]	; (8001304 <_printf_i+0x21c>)
 8001148:	220a      	movs	r2, #10
 800114a:	e039      	b.n	80011c0 <_printf_i+0xd8>
 800114c:	2973      	cmp	r1, #115	; 0x73
 800114e:	f000 809d 	beq.w	800128c <_printf_i+0x1a4>
 8001152:	d808      	bhi.n	8001166 <_printf_i+0x7e>
 8001154:	296f      	cmp	r1, #111	; 0x6f
 8001156:	d020      	beq.n	800119a <_printf_i+0xb2>
 8001158:	2970      	cmp	r1, #112	; 0x70
 800115a:	d1dd      	bne.n	8001118 <_printf_i+0x30>
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	e003      	b.n	800116e <_printf_i+0x86>
 8001166:	2975      	cmp	r1, #117	; 0x75
 8001168:	d017      	beq.n	800119a <_printf_i+0xb2>
 800116a:	2978      	cmp	r1, #120	; 0x78
 800116c:	d1d4      	bne.n	8001118 <_printf_i+0x30>
 800116e:	2378      	movs	r3, #120	; 0x78
 8001170:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001174:	4864      	ldr	r0, [pc, #400]	; (8001308 <_printf_i+0x220>)
 8001176:	e055      	b.n	8001224 <_printf_i+0x13c>
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	1d19      	adds	r1, r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6011      	str	r1, [r2, #0]
 8001180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001188:	2301      	movs	r3, #1
 800118a:	e08c      	b.n	80012a6 <_printf_i+0x1be>
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6011      	str	r1, [r2, #0]
 8001190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001194:	bf18      	it	ne
 8001196:	b21b      	sxthne	r3, r3
 8001198:	e7cf      	b.n	800113a <_printf_i+0x52>
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	6825      	ldr	r5, [r4, #0]
 800119e:	1d18      	adds	r0, r3, #4
 80011a0:	6010      	str	r0, [r2, #0]
 80011a2:	0628      	lsls	r0, r5, #24
 80011a4:	d501      	bpl.n	80011aa <_printf_i+0xc2>
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e002      	b.n	80011b0 <_printf_i+0xc8>
 80011aa:	0668      	lsls	r0, r5, #25
 80011ac:	d5fb      	bpl.n	80011a6 <_printf_i+0xbe>
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4854      	ldr	r0, [pc, #336]	; (8001304 <_printf_i+0x21c>)
 80011b2:	296f      	cmp	r1, #111	; 0x6f
 80011b4:	bf14      	ite	ne
 80011b6:	220a      	movne	r2, #10
 80011b8:	2208      	moveq	r2, #8
 80011ba:	2100      	movs	r1, #0
 80011bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80011c0:	6865      	ldr	r5, [r4, #4]
 80011c2:	60a5      	str	r5, [r4, #8]
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	f2c0 8095 	blt.w	80012f4 <_printf_i+0x20c>
 80011ca:	6821      	ldr	r1, [r4, #0]
 80011cc:	f021 0104 	bic.w	r1, r1, #4
 80011d0:	6021      	str	r1, [r4, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d13d      	bne.n	8001252 <_printf_i+0x16a>
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	f040 808e 	bne.w	80012f8 <_printf_i+0x210>
 80011dc:	4665      	mov	r5, ip
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d10b      	bne.n	80011fa <_printf_i+0x112>
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	07db      	lsls	r3, r3, #31
 80011e6:	d508      	bpl.n	80011fa <_printf_i+0x112>
 80011e8:	6923      	ldr	r3, [r4, #16]
 80011ea:	6862      	ldr	r2, [r4, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	bfde      	ittt	le
 80011f0:	2330      	movle	r3, #48	; 0x30
 80011f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011fa:	ebac 0305 	sub.w	r3, ip, r5
 80011fe:	6123      	str	r3, [r4, #16]
 8001200:	f8cd 8000 	str.w	r8, [sp]
 8001204:	463b      	mov	r3, r7
 8001206:	aa03      	add	r2, sp, #12
 8001208:	4621      	mov	r1, r4
 800120a:	4630      	mov	r0, r6
 800120c:	f7ff fef6 	bl	8000ffc <_printf_common>
 8001210:	3001      	adds	r0, #1
 8001212:	d14d      	bne.n	80012b0 <_printf_i+0x1c8>
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	b005      	add	sp, #20
 800121a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800121e:	4839      	ldr	r0, [pc, #228]	; (8001304 <_printf_i+0x21c>)
 8001220:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	6821      	ldr	r1, [r4, #0]
 8001228:	1d1d      	adds	r5, r3, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6015      	str	r5, [r2, #0]
 800122e:	060a      	lsls	r2, r1, #24
 8001230:	d50b      	bpl.n	800124a <_printf_i+0x162>
 8001232:	07ca      	lsls	r2, r1, #31
 8001234:	bf44      	itt	mi
 8001236:	f041 0120 	orrmi.w	r1, r1, #32
 800123a:	6021      	strmi	r1, [r4, #0]
 800123c:	b91b      	cbnz	r3, 8001246 <_printf_i+0x15e>
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	f022 0220 	bic.w	r2, r2, #32
 8001244:	6022      	str	r2, [r4, #0]
 8001246:	2210      	movs	r2, #16
 8001248:	e7b7      	b.n	80011ba <_printf_i+0xd2>
 800124a:	064d      	lsls	r5, r1, #25
 800124c:	bf48      	it	mi
 800124e:	b29b      	uxthmi	r3, r3
 8001250:	e7ef      	b.n	8001232 <_printf_i+0x14a>
 8001252:	4665      	mov	r5, ip
 8001254:	fbb3 f1f2 	udiv	r1, r3, r2
 8001258:	fb02 3311 	mls	r3, r2, r1, r3
 800125c:	5cc3      	ldrb	r3, [r0, r3]
 800125e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001262:	460b      	mov	r3, r1
 8001264:	2900      	cmp	r1, #0
 8001266:	d1f5      	bne.n	8001254 <_printf_i+0x16c>
 8001268:	e7b9      	b.n	80011de <_printf_i+0xf6>
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	6825      	ldr	r5, [r4, #0]
 800126e:	6961      	ldr	r1, [r4, #20]
 8001270:	1d18      	adds	r0, r3, #4
 8001272:	6010      	str	r0, [r2, #0]
 8001274:	0628      	lsls	r0, r5, #24
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	d501      	bpl.n	800127e <_printf_i+0x196>
 800127a:	6019      	str	r1, [r3, #0]
 800127c:	e002      	b.n	8001284 <_printf_i+0x19c>
 800127e:	066a      	lsls	r2, r5, #25
 8001280:	d5fb      	bpl.n	800127a <_printf_i+0x192>
 8001282:	8019      	strh	r1, [r3, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	6123      	str	r3, [r4, #16]
 8001288:	4665      	mov	r5, ip
 800128a:	e7b9      	b.n	8001200 <_printf_i+0x118>
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	1d19      	adds	r1, r3, #4
 8001290:	6011      	str	r1, [r2, #0]
 8001292:	681d      	ldr	r5, [r3, #0]
 8001294:	6862      	ldr	r2, [r4, #4]
 8001296:	2100      	movs	r1, #0
 8001298:	4628      	mov	r0, r5
 800129a:	f7fe ffa1 	bl	80001e0 <memchr>
 800129e:	b108      	cbz	r0, 80012a4 <_printf_i+0x1bc>
 80012a0:	1b40      	subs	r0, r0, r5
 80012a2:	6060      	str	r0, [r4, #4]
 80012a4:	6863      	ldr	r3, [r4, #4]
 80012a6:	6123      	str	r3, [r4, #16]
 80012a8:	2300      	movs	r3, #0
 80012aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012ae:	e7a7      	b.n	8001200 <_printf_i+0x118>
 80012b0:	6923      	ldr	r3, [r4, #16]
 80012b2:	462a      	mov	r2, r5
 80012b4:	4639      	mov	r1, r7
 80012b6:	4630      	mov	r0, r6
 80012b8:	47c0      	blx	r8
 80012ba:	3001      	adds	r0, #1
 80012bc:	d0aa      	beq.n	8001214 <_printf_i+0x12c>
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	079b      	lsls	r3, r3, #30
 80012c2:	d413      	bmi.n	80012ec <_printf_i+0x204>
 80012c4:	68e0      	ldr	r0, [r4, #12]
 80012c6:	9b03      	ldr	r3, [sp, #12]
 80012c8:	4298      	cmp	r0, r3
 80012ca:	bfb8      	it	lt
 80012cc:	4618      	movlt	r0, r3
 80012ce:	e7a3      	b.n	8001218 <_printf_i+0x130>
 80012d0:	2301      	movs	r3, #1
 80012d2:	464a      	mov	r2, r9
 80012d4:	4639      	mov	r1, r7
 80012d6:	4630      	mov	r0, r6
 80012d8:	47c0      	blx	r8
 80012da:	3001      	adds	r0, #1
 80012dc:	d09a      	beq.n	8001214 <_printf_i+0x12c>
 80012de:	3501      	adds	r5, #1
 80012e0:	68e3      	ldr	r3, [r4, #12]
 80012e2:	9a03      	ldr	r2, [sp, #12]
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	dcf2      	bgt.n	80012d0 <_printf_i+0x1e8>
 80012ea:	e7eb      	b.n	80012c4 <_printf_i+0x1dc>
 80012ec:	2500      	movs	r5, #0
 80012ee:	f104 0919 	add.w	r9, r4, #25
 80012f2:	e7f5      	b.n	80012e0 <_printf_i+0x1f8>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ac      	bne.n	8001252 <_printf_i+0x16a>
 80012f8:	7803      	ldrb	r3, [r0, #0]
 80012fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001302:	e76c      	b.n	80011de <_printf_i+0xf6>
 8001304:	08001552 	.word	0x08001552
 8001308:	08001563 	.word	0x08001563

0800130c <memcpy>:
 800130c:	b510      	push	{r4, lr}
 800130e:	1e43      	subs	r3, r0, #1
 8001310:	440a      	add	r2, r1
 8001312:	4291      	cmp	r1, r2
 8001314:	d100      	bne.n	8001318 <memcpy+0xc>
 8001316:	bd10      	pop	{r4, pc}
 8001318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800131c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001320:	e7f7      	b.n	8001312 <memcpy+0x6>

08001322 <memmove>:
 8001322:	4288      	cmp	r0, r1
 8001324:	b510      	push	{r4, lr}
 8001326:	eb01 0302 	add.w	r3, r1, r2
 800132a:	d807      	bhi.n	800133c <memmove+0x1a>
 800132c:	1e42      	subs	r2, r0, #1
 800132e:	4299      	cmp	r1, r3
 8001330:	d00a      	beq.n	8001348 <memmove+0x26>
 8001332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001336:	f802 4f01 	strb.w	r4, [r2, #1]!
 800133a:	e7f8      	b.n	800132e <memmove+0xc>
 800133c:	4283      	cmp	r3, r0
 800133e:	d9f5      	bls.n	800132c <memmove+0xa>
 8001340:	1881      	adds	r1, r0, r2
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	42d3      	cmn	r3, r2
 8001346:	d100      	bne.n	800134a <memmove+0x28>
 8001348:	bd10      	pop	{r4, pc}
 800134a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800134e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001352:	e7f7      	b.n	8001344 <memmove+0x22>

08001354 <_free_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4605      	mov	r5, r0
 8001358:	2900      	cmp	r1, #0
 800135a:	d045      	beq.n	80013e8 <_free_r+0x94>
 800135c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001360:	1f0c      	subs	r4, r1, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	bfb8      	it	lt
 8001366:	18e4      	addlt	r4, r4, r3
 8001368:	f000 f8d2 	bl	8001510 <__malloc_lock>
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <_free_r+0x98>)
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	4610      	mov	r0, r2
 8001372:	b933      	cbnz	r3, 8001382 <_free_r+0x2e>
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	6014      	str	r4, [r2, #0]
 8001378:	4628      	mov	r0, r5
 800137a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800137e:	f000 b8c8 	b.w	8001512 <__malloc_unlock>
 8001382:	42a3      	cmp	r3, r4
 8001384:	d90c      	bls.n	80013a0 <_free_r+0x4c>
 8001386:	6821      	ldr	r1, [r4, #0]
 8001388:	1862      	adds	r2, r4, r1
 800138a:	4293      	cmp	r3, r2
 800138c:	bf04      	itt	eq
 800138e:	681a      	ldreq	r2, [r3, #0]
 8001390:	685b      	ldreq	r3, [r3, #4]
 8001392:	6063      	str	r3, [r4, #4]
 8001394:	bf04      	itt	eq
 8001396:	1852      	addeq	r2, r2, r1
 8001398:	6022      	streq	r2, [r4, #0]
 800139a:	6004      	str	r4, [r0, #0]
 800139c:	e7ec      	b.n	8001378 <_free_r+0x24>
 800139e:	4613      	mov	r3, r2
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	b10a      	cbz	r2, 80013a8 <_free_r+0x54>
 80013a4:	42a2      	cmp	r2, r4
 80013a6:	d9fa      	bls.n	800139e <_free_r+0x4a>
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	1858      	adds	r0, r3, r1
 80013ac:	42a0      	cmp	r0, r4
 80013ae:	d10b      	bne.n	80013c8 <_free_r+0x74>
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	4401      	add	r1, r0
 80013b4:	1858      	adds	r0, r3, r1
 80013b6:	4282      	cmp	r2, r0
 80013b8:	6019      	str	r1, [r3, #0]
 80013ba:	d1dd      	bne.n	8001378 <_free_r+0x24>
 80013bc:	6810      	ldr	r0, [r2, #0]
 80013be:	6852      	ldr	r2, [r2, #4]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	4401      	add	r1, r0
 80013c4:	6019      	str	r1, [r3, #0]
 80013c6:	e7d7      	b.n	8001378 <_free_r+0x24>
 80013c8:	d902      	bls.n	80013d0 <_free_r+0x7c>
 80013ca:	230c      	movs	r3, #12
 80013cc:	602b      	str	r3, [r5, #0]
 80013ce:	e7d3      	b.n	8001378 <_free_r+0x24>
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	1821      	adds	r1, r4, r0
 80013d4:	428a      	cmp	r2, r1
 80013d6:	bf04      	itt	eq
 80013d8:	6811      	ldreq	r1, [r2, #0]
 80013da:	6852      	ldreq	r2, [r2, #4]
 80013dc:	6062      	str	r2, [r4, #4]
 80013de:	bf04      	itt	eq
 80013e0:	1809      	addeq	r1, r1, r0
 80013e2:	6021      	streq	r1, [r4, #0]
 80013e4:	605c      	str	r4, [r3, #4]
 80013e6:	e7c7      	b.n	8001378 <_free_r+0x24>
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
 80013ea:	bf00      	nop
 80013ec:	200003b4 	.word	0x200003b4

080013f0 <_malloc_r>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	1ccd      	adds	r5, r1, #3
 80013f4:	f025 0503 	bic.w	r5, r5, #3
 80013f8:	3508      	adds	r5, #8
 80013fa:	2d0c      	cmp	r5, #12
 80013fc:	bf38      	it	cc
 80013fe:	250c      	movcc	r5, #12
 8001400:	2d00      	cmp	r5, #0
 8001402:	4606      	mov	r6, r0
 8001404:	db01      	blt.n	800140a <_malloc_r+0x1a>
 8001406:	42a9      	cmp	r1, r5
 8001408:	d903      	bls.n	8001412 <_malloc_r+0x22>
 800140a:	230c      	movs	r3, #12
 800140c:	6033      	str	r3, [r6, #0]
 800140e:	2000      	movs	r0, #0
 8001410:	bd70      	pop	{r4, r5, r6, pc}
 8001412:	f000 f87d 	bl	8001510 <__malloc_lock>
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <_malloc_r+0xac>)
 8001418:	6814      	ldr	r4, [r2, #0]
 800141a:	4621      	mov	r1, r4
 800141c:	b991      	cbnz	r1, 8001444 <_malloc_r+0x54>
 800141e:	4c20      	ldr	r4, [pc, #128]	; (80014a0 <_malloc_r+0xb0>)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	b91b      	cbnz	r3, 800142c <_malloc_r+0x3c>
 8001424:	4630      	mov	r0, r6
 8001426:	f000 f863 	bl	80014f0 <_sbrk_r>
 800142a:	6020      	str	r0, [r4, #0]
 800142c:	4629      	mov	r1, r5
 800142e:	4630      	mov	r0, r6
 8001430:	f000 f85e 	bl	80014f0 <_sbrk_r>
 8001434:	1c43      	adds	r3, r0, #1
 8001436:	d124      	bne.n	8001482 <_malloc_r+0x92>
 8001438:	230c      	movs	r3, #12
 800143a:	6033      	str	r3, [r6, #0]
 800143c:	4630      	mov	r0, r6
 800143e:	f000 f868 	bl	8001512 <__malloc_unlock>
 8001442:	e7e4      	b.n	800140e <_malloc_r+0x1e>
 8001444:	680b      	ldr	r3, [r1, #0]
 8001446:	1b5b      	subs	r3, r3, r5
 8001448:	d418      	bmi.n	800147c <_malloc_r+0x8c>
 800144a:	2b0b      	cmp	r3, #11
 800144c:	d90f      	bls.n	800146e <_malloc_r+0x7e>
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	50cd      	str	r5, [r1, r3]
 8001452:	18cc      	adds	r4, r1, r3
 8001454:	4630      	mov	r0, r6
 8001456:	f000 f85c 	bl	8001512 <__malloc_unlock>
 800145a:	f104 000b 	add.w	r0, r4, #11
 800145e:	1d23      	adds	r3, r4, #4
 8001460:	f020 0007 	bic.w	r0, r0, #7
 8001464:	1ac3      	subs	r3, r0, r3
 8001466:	d0d3      	beq.n	8001410 <_malloc_r+0x20>
 8001468:	425a      	negs	r2, r3
 800146a:	50e2      	str	r2, [r4, r3]
 800146c:	e7d0      	b.n	8001410 <_malloc_r+0x20>
 800146e:	428c      	cmp	r4, r1
 8001470:	684b      	ldr	r3, [r1, #4]
 8001472:	bf16      	itet	ne
 8001474:	6063      	strne	r3, [r4, #4]
 8001476:	6013      	streq	r3, [r2, #0]
 8001478:	460c      	movne	r4, r1
 800147a:	e7eb      	b.n	8001454 <_malloc_r+0x64>
 800147c:	460c      	mov	r4, r1
 800147e:	6849      	ldr	r1, [r1, #4]
 8001480:	e7cc      	b.n	800141c <_malloc_r+0x2c>
 8001482:	1cc4      	adds	r4, r0, #3
 8001484:	f024 0403 	bic.w	r4, r4, #3
 8001488:	42a0      	cmp	r0, r4
 800148a:	d005      	beq.n	8001498 <_malloc_r+0xa8>
 800148c:	1a21      	subs	r1, r4, r0
 800148e:	4630      	mov	r0, r6
 8001490:	f000 f82e 	bl	80014f0 <_sbrk_r>
 8001494:	3001      	adds	r0, #1
 8001496:	d0cf      	beq.n	8001438 <_malloc_r+0x48>
 8001498:	6025      	str	r5, [r4, #0]
 800149a:	e7db      	b.n	8001454 <_malloc_r+0x64>
 800149c:	200003b4 	.word	0x200003b4
 80014a0:	200003b8 	.word	0x200003b8

080014a4 <_realloc_r>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	4607      	mov	r7, r0
 80014a8:	4614      	mov	r4, r2
 80014aa:	460e      	mov	r6, r1
 80014ac:	b921      	cbnz	r1, 80014b8 <_realloc_r+0x14>
 80014ae:	4611      	mov	r1, r2
 80014b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80014b4:	f7ff bf9c 	b.w	80013f0 <_malloc_r>
 80014b8:	b922      	cbnz	r2, 80014c4 <_realloc_r+0x20>
 80014ba:	f7ff ff4b 	bl	8001354 <_free_r>
 80014be:	4625      	mov	r5, r4
 80014c0:	4628      	mov	r0, r5
 80014c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014c4:	f000 f826 	bl	8001514 <_malloc_usable_size_r>
 80014c8:	42a0      	cmp	r0, r4
 80014ca:	d20f      	bcs.n	80014ec <_realloc_r+0x48>
 80014cc:	4621      	mov	r1, r4
 80014ce:	4638      	mov	r0, r7
 80014d0:	f7ff ff8e 	bl	80013f0 <_malloc_r>
 80014d4:	4605      	mov	r5, r0
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d0f2      	beq.n	80014c0 <_realloc_r+0x1c>
 80014da:	4631      	mov	r1, r6
 80014dc:	4622      	mov	r2, r4
 80014de:	f7ff ff15 	bl	800130c <memcpy>
 80014e2:	4631      	mov	r1, r6
 80014e4:	4638      	mov	r0, r7
 80014e6:	f7ff ff35 	bl	8001354 <_free_r>
 80014ea:	e7e9      	b.n	80014c0 <_realloc_r+0x1c>
 80014ec:	4635      	mov	r5, r6
 80014ee:	e7e7      	b.n	80014c0 <_realloc_r+0x1c>

080014f0 <_sbrk_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4c06      	ldr	r4, [pc, #24]	; (800150c <_sbrk_r+0x1c>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4605      	mov	r5, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	6023      	str	r3, [r4, #0]
 80014fc:	f7ff fb6c 	bl	8000bd8 <_sbrk>
 8001500:	1c43      	adds	r3, r0, #1
 8001502:	d102      	bne.n	800150a <_sbrk_r+0x1a>
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	b103      	cbz	r3, 800150a <_sbrk_r+0x1a>
 8001508:	602b      	str	r3, [r5, #0]
 800150a:	bd38      	pop	{r3, r4, r5, pc}
 800150c:	200003c0 	.word	0x200003c0

08001510 <__malloc_lock>:
 8001510:	4770      	bx	lr

08001512 <__malloc_unlock>:
 8001512:	4770      	bx	lr

08001514 <_malloc_usable_size_r>:
 8001514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001518:	1f18      	subs	r0, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	bfbc      	itt	lt
 800151e:	580b      	ldrlt	r3, [r1, r0]
 8001520:	18c0      	addlt	r0, r0, r3
 8001522:	4770      	bx	lr

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	bf00      	nop
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr
